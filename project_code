{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":8409280,"sourceType":"datasetVersion","datasetId":5004634}],"dockerImageVersionId":30732,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom transformers import (\n    AutoTokenizer, \n    AutoModelForSequenceClassification, \n    TrainingArguments, \n    Trainer, \n    AutoConfig, \n    EarlyStoppingCallback,\n    DataCollatorWithPadding\n)\nfrom datasets import Dataset, concatenate_datasets\nimport gc\nimport torch\nfrom sklearn.metrics import accuracy_score, precision_recall_fscore_support\nimport matplotlib.pyplot as plt","metadata":{"execution":{"iopub.status.busy":"2024-07-04T23:13:40.065634Z","iopub.execute_input":"2024-07-04T23:13:40.066050Z","iopub.status.idle":"2024-07-04T23:13:40.520053Z","shell.execute_reply.started":"2024-07-04T23:13:40.066004Z","shell.execute_reply":"2024-07-04T23:13:40.519205Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"df = pd.read_csv('/kaggle/input/hatespeech/labeled_data.csv')","metadata":{"execution":{"iopub.status.busy":"2024-07-04T23:13:41.488374Z","iopub.execute_input":"2024-07-04T23:13:41.489151Z","iopub.status.idle":"2024-07-04T23:13:41.580751Z","shell.execute_reply.started":"2024-07-04T23:13:41.489115Z","shell.execute_reply":"2024-07-04T23:13:41.579888Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"df.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-04T23:13:42.172541Z","iopub.execute_input":"2024-07-04T23:13:42.172926Z","iopub.status.idle":"2024-07-04T23:13:42.194448Z","shell.execute_reply.started":"2024-07-04T23:13:42.172895Z","shell.execute_reply":"2024-07-04T23:13:42.193424Z"},"trusted":true},"execution_count":4,"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"   Unnamed: 0  count  hate_speech  offensive_language  neither  class  \\\n0           0      3            0                   0        3      2   \n1           1      3            0                   3        0      1   \n2           2      3            0                   3        0      1   \n3           3      3            0                   2        1      1   \n4           4      6            0                   6        0      1   \n\n                                               tweet  \n0  !!! RT @mayasolovely: As a woman you shouldn't...  \n1  !!!!! RT @mleew17: boy dats cold...tyga dwn ba...  \n2  !!!!!!! RT @UrKindOfBrand Dawg!!!! RT @80sbaby...  \n3  !!!!!!!!! RT @C_G_Anderson: @viva_based she lo...  \n4  !!!!!!!!!!!!! RT @ShenikaRoberts: The shit you...  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Unnamed: 0</th>\n      <th>count</th>\n      <th>hate_speech</th>\n      <th>offensive_language</th>\n      <th>neither</th>\n      <th>class</th>\n      <th>tweet</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>0</td>\n      <td>3</td>\n      <td>2</td>\n      <td>!!! RT @mayasolovely: As a woman you shouldn't...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>3</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>1</td>\n      <td>!!!!! RT @mleew17: boy dats cold...tyga dwn ba...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>3</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>1</td>\n      <td>!!!!!!! RT @UrKindOfBrand Dawg!!!! RT @80sbaby...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>3</td>\n      <td>0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>!!!!!!!!! RT @C_G_Anderson: @viva_based she lo...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>6</td>\n      <td>0</td>\n      <td>6</td>\n      <td>0</td>\n      <td>1</td>\n      <td>!!!!!!!!!!!!! RT @ShenikaRoberts: The shit you...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df.drop(columns=df.columns[0], axis=1, inplace=True)\ndf.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-04T23:13:42.653428Z","iopub.execute_input":"2024-07-04T23:13:42.653808Z","iopub.status.idle":"2024-07-04T23:13:42.671331Z","shell.execute_reply.started":"2024-07-04T23:13:42.653778Z","shell.execute_reply":"2024-07-04T23:13:42.670263Z"},"trusted":true},"execution_count":5,"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"   count  hate_speech  offensive_language  neither  class  \\\n0      3            0                   0        3      2   \n1      3            0                   3        0      1   \n2      3            0                   3        0      1   \n3      3            0                   2        1      1   \n4      6            0                   6        0      1   \n\n                                               tweet  \n0  !!! RT @mayasolovely: As a woman you shouldn't...  \n1  !!!!! RT @mleew17: boy dats cold...tyga dwn ba...  \n2  !!!!!!! RT @UrKindOfBrand Dawg!!!! RT @80sbaby...  \n3  !!!!!!!!! RT @C_G_Anderson: @viva_based she lo...  \n4  !!!!!!!!!!!!! RT @ShenikaRoberts: The shit you...  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>count</th>\n      <th>hate_speech</th>\n      <th>offensive_language</th>\n      <th>neither</th>\n      <th>class</th>\n      <th>tweet</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>3</td>\n      <td>0</td>\n      <td>0</td>\n      <td>3</td>\n      <td>2</td>\n      <td>!!! RT @mayasolovely: As a woman you shouldn't...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>1</td>\n      <td>!!!!! RT @mleew17: boy dats cold...tyga dwn ba...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>1</td>\n      <td>!!!!!!! RT @UrKindOfBrand Dawg!!!! RT @80sbaby...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>!!!!!!!!! RT @C_G_Anderson: @viva_based she lo...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>6</td>\n      <td>0</td>\n      <td>6</td>\n      <td>0</td>\n      <td>1</td>\n      <td>!!!!!!!!!!!!! RT @ShenikaRoberts: The shit you...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# Convert to binary classification\ndf['binary_class'] = (df['class'] != 2).astype(int)  # 0 for neither, 1 for hate speech or offensive language\ndf.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-04T23:13:43.016455Z","iopub.execute_input":"2024-07-04T23:13:43.017383Z","iopub.status.idle":"2024-07-04T23:13:43.031474Z","shell.execute_reply.started":"2024-07-04T23:13:43.017346Z","shell.execute_reply":"2024-07-04T23:13:43.030265Z"},"trusted":true},"execution_count":6,"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"   count  hate_speech  offensive_language  neither  class  \\\n0      3            0                   0        3      2   \n1      3            0                   3        0      1   \n2      3            0                   3        0      1   \n3      3            0                   2        1      1   \n4      6            0                   6        0      1   \n\n                                               tweet  binary_class  \n0  !!! RT @mayasolovely: As a woman you shouldn't...             0  \n1  !!!!! RT @mleew17: boy dats cold...tyga dwn ba...             1  \n2  !!!!!!! RT @UrKindOfBrand Dawg!!!! RT @80sbaby...             1  \n3  !!!!!!!!! RT @C_G_Anderson: @viva_based she lo...             1  \n4  !!!!!!!!!!!!! RT @ShenikaRoberts: The shit you...             1  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>count</th>\n      <th>hate_speech</th>\n      <th>offensive_language</th>\n      <th>neither</th>\n      <th>class</th>\n      <th>tweet</th>\n      <th>binary_class</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>3</td>\n      <td>0</td>\n      <td>0</td>\n      <td>3</td>\n      <td>2</td>\n      <td>!!! RT @mayasolovely: As a woman you shouldn't...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>1</td>\n      <td>!!!!! RT @mleew17: boy dats cold...tyga dwn ba...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>1</td>\n      <td>!!!!!!! RT @UrKindOfBrand Dawg!!!! RT @80sbaby...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>!!!!!!!!! RT @C_G_Anderson: @viva_based she lo...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>6</td>\n      <td>0</td>\n      <td>6</td>\n      <td>0</td>\n      <td>1</td>\n      <td>!!!!!!!!!!!!! RT @ShenikaRoberts: The shit you...</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"print(df.info())","metadata":{"execution":{"iopub.status.busy":"2024-07-04T23:13:43.328019Z","iopub.execute_input":"2024-07-04T23:13:43.328971Z","iopub.status.idle":"2024-07-04T23:13:43.354836Z","shell.execute_reply.started":"2024-07-04T23:13:43.328935Z","shell.execute_reply":"2024-07-04T23:13:43.353766Z"},"trusted":true},"execution_count":7,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 24783 entries, 0 to 24782\nData columns (total 7 columns):\n #   Column              Non-Null Count  Dtype \n---  ------              --------------  ----- \n 0   count               24783 non-null  int64 \n 1   hate_speech         24783 non-null  int64 \n 2   offensive_language  24783 non-null  int64 \n 3   neither             24783 non-null  int64 \n 4   class               24783 non-null  int64 \n 5   tweet               24783 non-null  object\n 6   binary_class        24783 non-null  int64 \ndtypes: int64(6), object(1)\nmemory usage: 1.3+ MB\nNone\n","output_type":"stream"}]},{"cell_type":"code","source":"import seaborn as sns\n\ndef calculate_confidence_levels(df):\n    # Calculate confidence levels\n    df['hate_and_offensive'] = (df['hate_speech'] +  df['offensive_language']) / df['count']\n    df['neither_confidence'] = df['neither'] / df['count']\n    \n    return df","metadata":{"execution":{"iopub.status.busy":"2024-07-04T23:13:43.584072Z","iopub.execute_input":"2024-07-04T23:13:43.584928Z","iopub.status.idle":"2024-07-04T23:13:43.677959Z","shell.execute_reply.started":"2024-07-04T23:13:43.584894Z","shell.execute_reply":"2024-07-04T23:13:43.676881Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"code","source":"def plot_annotation_confidence(df):\n    # Set up the plot style\n    plt.figure(figsize=(8, 6))\n\n    # Plot hate speech confidence\n    sns.histplot(df['hate_and_offensive'])\n    plt.title('Distribution of Hate Speech and Offensive Language Annotation Confidence')\n    plt.xlabel('Confidence Level')\n    plt.ylabel('Count')\n    \n    plt.tight_layout()\n    plt.savefig('annotation_confidence_distribution.png')\n    plt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-04T23:13:43.870190Z","iopub.execute_input":"2024-07-04T23:13:43.870857Z","iopub.status.idle":"2024-07-04T23:13:43.876675Z","shell.execute_reply.started":"2024-07-04T23:13:43.870824Z","shell.execute_reply":"2024-07-04T23:13:43.875652Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"code","source":"# Calculate confidence levels\ndf = calculate_confidence_levels(df)\n\n# Plot the distributions\nplot_annotation_confidence(df)","metadata":{"execution":{"iopub.status.busy":"2024-07-04T23:13:44.222706Z","iopub.execute_input":"2024-07-04T23:13:44.223374Z","iopub.status.idle":"2024-07-04T23:13:44.735053Z","shell.execute_reply.started":"2024-07-04T23:13:44.223340Z","shell.execute_reply":"2024-07-04T23:13:44.734063Z"},"trusted":true},"execution_count":10,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"# Print some statistics\nprint(\"Hate Speech and Offensive Language Confidence Statistics:\")\nprint(df['hate_and_offensive'].describe())\nprint(\"\\nNeither Confidence Statistics:\")\nprint(df['neither_confidence'].describe())","metadata":{"execution":{"iopub.status.busy":"2024-07-04T23:13:44.736806Z","iopub.execute_input":"2024-07-04T23:13:44.737123Z","iopub.status.idle":"2024-07-04T23:13:44.751873Z","shell.execute_reply.started":"2024-07-04T23:13:44.737097Z","shell.execute_reply":"2024-07-04T23:13:44.750963Z"},"trusted":true},"execution_count":11,"outputs":[{"name":"stdout","text":"Hate Speech and Offensive Language Confidence Statistics:\ncount    24783.000000\nmean         0.827129\nstd          0.341761\nmin          0.000000\n25%          1.000000\n50%          1.000000\n75%          1.000000\nmax          1.000000\nName: hate_and_offensive, dtype: float64\n\nNeither Confidence Statistics:\ncount    24783.000000\nmean         0.172871\nstd          0.341761\nmin          0.000000\n25%          0.000000\n50%          0.000000\n75%          0.000000\nmax          1.000000\nName: neither_confidence, dtype: float64\n","output_type":"stream"}]},{"cell_type":"markdown","source":"<h3>Data Preparation</h3>","metadata":{}},{"cell_type":"code","source":"# Create annotation perspectives\ndef create_annotation_perspectives(df, agreement_threshold=0.75):\n    total_votes = df['count']\n    inappropriate_votes = df['hate_speech'] + df['offensive_language']\n    agreement_ratio = np.maximum(inappropriate_votes, df['neither']) / total_votes\n    \n    original = df[['tweet', 'binary_class']]\n    uncontroversial = df[agreement_ratio >= agreement_threshold][['tweet', 'binary_class']]\n    controversial = df[agreement_ratio < agreement_threshold][['tweet', 'binary_class']]\n    \n    return {\n        'original': original,\n        'uncontroversial': uncontroversial,\n        'controversial': controversial\n    }","metadata":{"execution":{"iopub.status.busy":"2024-07-04T23:13:45.523860Z","iopub.execute_input":"2024-07-04T23:13:45.524257Z","iopub.status.idle":"2024-07-04T23:13:45.531010Z","shell.execute_reply.started":"2024-07-04T23:13:45.524224Z","shell.execute_reply":"2024-07-04T23:13:45.529920Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"code","source":"perspectives = create_annotation_perspectives(df)\n\n# Create a combined test set (20% of the original data)\ntrain_df, test_df = train_test_split(df[['tweet', 'binary_class']], test_size=0.2, random_state=27)\n\n# Limit training data to 5k samples for each perspective\nfor perspective in perspectives:\n    if len(perspectives[perspective]) > 5000:\n        perspectives[perspective] = perspectives[perspective].sample(n=5000, random_state=27)","metadata":{"execution":{"iopub.status.busy":"2024-07-04T23:13:46.800413Z","iopub.execute_input":"2024-07-04T23:13:46.801297Z","iopub.status.idle":"2024-07-04T23:13:46.829092Z","shell.execute_reply.started":"2024-07-04T23:13:46.801265Z","shell.execute_reply":"2024-07-04T23:13:46.828172Z"},"trusted":true},"execution_count":13,"outputs":[]},{"cell_type":"code","source":"# Compute metrics function\ndef compute_metrics(pred):\n    labels = pred.label_ids\n    preds = pred.predictions.argmax(-1)\n    precision, recall, f1, _ = precision_recall_fscore_support(labels, preds, average='binary')\n    acc = accuracy_score(labels, preds)\n    return {\n        'accuracy': acc,\n        'f1': f1,\n        'precision': precision,\n        'recall': recall\n    }","metadata":{"execution":{"iopub.status.busy":"2024-07-04T23:13:47.259770Z","iopub.execute_input":"2024-07-04T23:13:47.260425Z","iopub.status.idle":"2024-07-04T23:13:47.269785Z","shell.execute_reply.started":"2024-07-04T23:13:47.260390Z","shell.execute_reply":"2024-07-04T23:13:47.268591Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"code","source":"# Train and evaluate model function\ndef train_evaluate_model(train_df, val_df, test_df, model_name, output_dir):\n    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n    print(f\"Using device: {device}\")\n\n    tokenizer = AutoTokenizer.from_pretrained(model_name)\n    \n    config = AutoConfig.from_pretrained(model_name)\n    config.num_labels = 2  # Binary classification\n    \n    model = AutoModelForSequenceClassification.from_pretrained(\n        model_name,\n        config=config,\n        ignore_mismatched_sizes=True\n    ).to(device)\n\n    def tokenize_function(examples):\n        return tokenizer(examples[\"tweet\"], padding=False, truncation=True, max_length=128)\n\n    train_dataset = Dataset.from_pandas(train_df)\n    val_dataset = Dataset.from_pandas(val_df)\n    test_dataset = Dataset.from_pandas(test_df)\n    \n    tokenized_train = train_dataset.map(tokenize_function, batched=True)\n    tokenized_val = val_dataset.map(tokenize_function, batched=True)\n    tokenized_test = test_dataset.map(tokenize_function, batched=True)\n\n    # Set the format to pytorch tensors and ensure labels are included\n    tokenized_train.set_format(type='torch', columns=['input_ids', 'attention_mask', 'binary_class'], output_all_columns=True)\n    tokenized_val.set_format(type='torch', columns=['input_ids', 'attention_mask', 'binary_class'], output_all_columns=True)\n    tokenized_test.set_format(type='torch', columns=['input_ids', 'attention_mask', 'binary_class'], output_all_columns=True)\n\n    # Rename 'binary_class' to 'labels' as expected by the model\n    tokenized_train = tokenized_train.rename_column(\"binary_class\", \"labels\")\n    tokenized_val = tokenized_val.rename_column(\"binary_class\", \"labels\")\n    tokenized_test = tokenized_test.rename_column(\"binary_class\", \"labels\")\n\n    # Create a data collator\n    data_collator = DataCollatorWithPadding(tokenizer=tokenizer)\n\n    training_args = TrainingArguments(\n        output_dir=output_dir,\n        num_train_epochs=5,\n        per_device_train_batch_size=8,\n        per_device_eval_batch_size=16,\n        gradient_accumulation_steps=3,\n        warmup_steps=300,\n        weight_decay=0.01,\n        logging_dir='./logs',\n        evaluation_strategy=\"steps\",\n        eval_steps=300,\n        save_steps=300,\n        load_best_model_at_end=True,\n        metric_for_best_model=\"f1\",\n        report_to=\"none\",  # This disables wandb and other integrations\n        fp16=True if torch.cuda.is_available() else False,\n        save_total_limit=2,\n        remove_unused_columns=True  # Remove unused columns to save memory\n    )\n\n    # Early stopping callback\n    early_stopping_callback = EarlyStoppingCallback(\n        early_stopping_patience=3,\n        early_stopping_threshold=0.01\n    )\n\n    trainer = Trainer(\n        model=model,\n        args=training_args,\n        train_dataset=tokenized_train,\n        eval_dataset=tokenized_val,\n        data_collator=data_collator,\n        compute_metrics=compute_metrics,\n        callbacks=[early_stopping_callback]\n    )\n\n    try:\n        trainer.train()\n    except RuntimeError as e:\n        if \"CUDA out of memory\" in str(e):\n            print(\"CUDA out of memory. Falling back to CPU.\")\n            device = torch.device(\"cpu\")\n            model = model.to(device)\n            trainer = Trainer(\n                model=model,\n                args=training_args,\n                train_dataset=tokenized_train,\n                eval_dataset=tokenized_val,\n                data_collator=data_collator,\n                compute_metrics=compute_metrics,\n                callbacks=[early_stopping_callback]\n            )\n            trainer.train()\n        else:\n            raise e\n\n    eval_results = trainer.evaluate(tokenized_test)\n    \n    return trainer, eval_results, tokenizer","metadata":{"execution":{"iopub.status.busy":"2024-07-04T23:13:47.966632Z","iopub.execute_input":"2024-07-04T23:13:47.967010Z","iopub.status.idle":"2024-07-04T23:13:47.985215Z","shell.execute_reply.started":"2024-07-04T23:13:47.966980Z","shell.execute_reply":"2024-07-04T23:13:47.984113Z"},"trusted":true},"execution_count":15,"outputs":[]},{"cell_type":"code","source":"# Function to run experiments for a specific model\ndef run_experiment(model_name):\n    results = {}\n\n    for perspective_name, perspective_data in perspectives.items():\n        print(f\"Training {model_name} on {perspective_name} perspective\")\n        \n        # Split the perspective data into train and validation\n        train_df, val_df = train_test_split(perspective_data, test_size=0.2, random_state=27)\n        \n        trainer, eval_results, tokenizer = train_evaluate_model(\n            train_df, val_df, test_df, model_name, f\"./results/{model_name}/{perspective_name}\"\n        )\n        results[perspective_name] = {\n            'trainer': trainer,\n            'eval_results': eval_results,\n            'tokenizer': tokenizer\n        }\n\n    return results","metadata":{"execution":{"iopub.status.busy":"2024-07-04T23:13:48.823262Z","iopub.execute_input":"2024-07-04T23:13:48.824268Z","iopub.status.idle":"2024-07-04T23:13:48.832209Z","shell.execute_reply.started":"2024-07-04T23:13:48.824224Z","shell.execute_reply":"2024-07-04T23:13:48.830970Z"},"trusted":true},"execution_count":16,"outputs":[]},{"cell_type":"code","source":"# Visualization function\ndef plot_results(results, model_name):\n    perspectives = list(results.keys())\n    metrics = ['accuracy', 'f1', 'precision', 'recall']\n    \n    fig, ax = plt.subplots(figsize=(12, 6))\n    x = np.arange(len(perspectives))\n    width = 0.2\n    \n    for i, metric in enumerate(metrics):\n        values = [results[p]['eval_results'][f'eval_{metric}'] for p in perspectives]\n        ax.bar(x + i*width, values, width, label=metric)\n    \n    ax.set_ylabel('Scores')\n    ax.set_title(f'{model_name} Performance Across Annotation Perspectives (Binary Classification)')\n    ax.set_xticks(x + width * 1.5)\n    ax.set_xticklabels(perspectives)\n    ax.legend(loc='lower right')\n    ax.set_ylim(0, 1)\n    \n    plt.tight_layout()\n    plt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-04T23:13:49.232847Z","iopub.execute_input":"2024-07-04T23:13:49.233798Z","iopub.status.idle":"2024-07-04T23:13:49.243642Z","shell.execute_reply.started":"2024-07-04T23:13:49.233755Z","shell.execute_reply":"2024-07-04T23:13:49.242567Z"},"trusted":true},"execution_count":17,"outputs":[]},{"cell_type":"code","source":"# Analysis function\ndef analyze_results(results, test_df):\n    for perspective_name, perspective_results in results.items():\n        trainer = perspective_results['trainer']\n        tokenizer = perspective_results['tokenizer']\n        tokenized_test = Dataset.from_pandas(test_df).map(\n            lambda examples: tokenizer(examples[\"tweet\"], padding=\"max_length\", truncation=True, max_length=128),\n            batched=True\n        )\n        tokenized_test = tokenized_test.rename_column(\"binary_class\", \"labels\")\n        preds = trainer.predict(tokenized_test).predictions.argmax(-1)\n        test_df[f'{perspective_name}_pred'] = preds\n\n    # Calculate agreement between models\n    model_agreement = (test_df['original_pred'] == test_df['uncontroversial_pred']) & \\\n                      (test_df['original_pred'] == test_df['controversial_pred'])\n    agreement_rate = model_agreement.mean()\n\n    print(f\"Agreement rate between all three models: {agreement_rate:.2f}\")\n\n    # Analyze disagreements\n    disagreements = test_df[~model_agreement]\n    print(f\"Number of samples where models disagree: {len(disagreements)}\")\n\n    return test_df, disagreements","metadata":{"execution":{"iopub.status.busy":"2024-07-04T23:13:49.551434Z","iopub.execute_input":"2024-07-04T23:13:49.552251Z","iopub.status.idle":"2024-07-04T23:13:49.562403Z","shell.execute_reply.started":"2024-07-04T23:13:49.552207Z","shell.execute_reply":"2024-07-04T23:13:49.561397Z"},"trusted":true},"execution_count":18,"outputs":[]},{"cell_type":"markdown","source":"# Model Training","metadata":{}},{"cell_type":"code","source":"all_results = {}","metadata":{"execution":{"iopub.status.busy":"2024-07-04T23:13:50.591192Z","iopub.execute_input":"2024-07-04T23:13:50.591553Z","iopub.status.idle":"2024-07-04T23:13:50.595993Z","shell.execute_reply.started":"2024-07-04T23:13:50.591526Z","shell.execute_reply":"2024-07-04T23:13:50.595014Z"},"trusted":true},"execution_count":19,"outputs":[]},{"cell_type":"markdown","source":"## cardiffnlp/twitter-roberta-base-hate","metadata":{}},{"cell_type":"code","source":"model_name = \"cardiffnlp/twitter-roberta-base-hate\"\nprint(f\"Running experiment for {model_name}\")\n\ntry:\n    results = run_experiment(model_name)\n    plot_results(results, model_name)\n    test_df, disagreements = analyze_results(results, test_df.copy())\n\n    all_results[model_name] = results\n\n    # Save disagreements to CSV\n    disagreements.to_csv(f'{model_name.split(\"/\")[-1]}_disagreements.csv', index=False)\n\n    print(f\"Experiment for {model_name} completed.\")\nexcept Exception as e:\n    print(f\"An error occurred during the experiment: {str(e)}\")\nfinally:\n    print(\"--------------------\")","metadata":{"execution":{"iopub.status.busy":"2024-07-04T23:13:52.039105Z","iopub.execute_input":"2024-07-04T23:13:52.039824Z","iopub.status.idle":"2024-07-04T23:25:03.425765Z","shell.execute_reply.started":"2024-07-04T23:13:52.039790Z","shell.execute_reply":"2024-07-04T23:25:03.424525Z"},"trusted":true},"execution_count":20,"outputs":[{"name":"stdout","text":"Running experiment for cardiffnlp/twitter-roberta-base-hate\nTraining cardiffnlp/twitter-roberta-base-hate on original perspective\nUsing device: cuda\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/huggingface_hub/file_download.py:1132: FutureWarning: `resume_download` is deprecated and will be removed in version 1.0.0. Downloads always resume when possible. If you want to force a new download, use `force_download=True`.\n  warnings.warn(\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"config.json:   0%|          | 0.00/700 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"0f4098bac18c4a98adc2048193e28326"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"vocab.json:   0%|          | 0.00/899k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"aca291249a3f4f4ab1a371709f266de0"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"merges.txt:   0%|          | 0.00/456k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"4b17afbc5b5045a28c8011643098a71a"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"special_tokens_map.json:   0%|          | 0.00/150 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"77b0c87b89b74b168bab1a16974db0b7"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"pytorch_model.bin:   0%|          | 0.00/499M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"9046f9da56b548ecac0b5b441e9658c1"}},"metadata":{}},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/torch/_utils.py:831: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()\n  return self.fget.__get__(instance, owner)()\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/4000 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"e47c25e6849f4a0bb119f1f2ca0ac25d"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/1000 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"7bd1f188b7ad46f9a997e96d3956b816"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/4957 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"03e546a60be74569a3e3280b92f4a9e0"}},"metadata":{}},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/transformers/training_args.py:1474: FutureWarning: `evaluation_strategy` is deprecated and will be removed in version 4.46 of 🤗 Transformers. Use `eval_strategy` instead\n  warnings.warn(\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"\n    <div>\n      \n      <progress value='830' max='830' style='width:300px; height:20px; vertical-align: middle;'></progress>\n      [830/830 03:35, Epoch 4/5]\n    </div>\n    <table border=\"1\" class=\"dataframe\">\n  <thead>\n <tr style=\"text-align: left;\">\n      <th>Step</th>\n      <th>Training Loss</th>\n      <th>Validation Loss</th>\n      <th>Accuracy</th>\n      <th>F1</th>\n      <th>Precision</th>\n      <th>Recall</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>300</td>\n      <td>No log</td>\n      <td>0.158978</td>\n      <td>0.959000</td>\n      <td>0.976287</td>\n      <td>0.965675</td>\n      <td>0.987135</td>\n    </tr>\n    <tr>\n      <td>600</td>\n      <td>0.158100</td>\n      <td>0.206988</td>\n      <td>0.964000</td>\n      <td>0.978848</td>\n      <td>0.983471</td>\n      <td>0.974269</td>\n    </tr>\n  </tbody>\n</table><p>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":""},"metadata":{}},{"name":"stdout","text":"Training cardiffnlp/twitter-roberta-base-hate on uncontroversial perspective\nUsing device: cuda\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/huggingface_hub/file_download.py:1132: FutureWarning: `resume_download` is deprecated and will be removed in version 1.0.0. Downloads always resume when possible. If you want to force a new download, use `force_download=True`.\n  warnings.warn(\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/4000 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"dd80b5d11b114936a37ba6b708b756ed"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/1000 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"23c6186c6cb446e990c89903ad29416f"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/4957 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"adc68ce8bd09461c90dfcd5f514149f9"}},"metadata":{}},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/transformers/training_args.py:1474: FutureWarning: `evaluation_strategy` is deprecated and will be removed in version 4.46 of 🤗 Transformers. Use `eval_strategy` instead\n  warnings.warn(\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"\n    <div>\n      \n      <progress value='830' max='830' style='width:300px; height:20px; vertical-align: middle;'></progress>\n      [830/830 03:37, Epoch 4/5]\n    </div>\n    <table border=\"1\" class=\"dataframe\">\n  <thead>\n <tr style=\"text-align: left;\">\n      <th>Step</th>\n      <th>Training Loss</th>\n      <th>Validation Loss</th>\n      <th>Accuracy</th>\n      <th>F1</th>\n      <th>Precision</th>\n      <th>Recall</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>300</td>\n      <td>No log</td>\n      <td>0.054771</td>\n      <td>0.983000</td>\n      <td>0.990280</td>\n      <td>0.987457</td>\n      <td>0.993119</td>\n    </tr>\n    <tr>\n      <td>600</td>\n      <td>0.098200</td>\n      <td>0.086138</td>\n      <td>0.987000</td>\n      <td>0.992542</td>\n      <td>0.993111</td>\n      <td>0.991972</td>\n    </tr>\n  </tbody>\n</table><p>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":""},"metadata":{}},{"name":"stdout","text":"Training cardiffnlp/twitter-roberta-base-hate on controversial perspective\nUsing device: cuda\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/huggingface_hub/file_download.py:1132: FutureWarning: `resume_download` is deprecated and will be removed in version 1.0.0. Downloads always resume when possible. If you want to force a new download, use `force_download=True`.\n  warnings.warn(\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/2191 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"e9e428e03fd84ef18211b442e8c2ee98"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/548 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"8b561bca70b54207a76cd530cfe96497"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/4957 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"f8b115313f4a4ae28c04b80c1d65d134"}},"metadata":{}},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/transformers/training_args.py:1474: FutureWarning: `evaluation_strategy` is deprecated and will be removed in version 4.46 of 🤗 Transformers. Use `eval_strategy` instead\n  warnings.warn(\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"\n    <div>\n      \n      <progress value='455' max='455' style='width:300px; height:20px; vertical-align: middle;'></progress>\n      [455/455 01:58, Epoch 4/5]\n    </div>\n    <table border=\"1\" class=\"dataframe\">\n  <thead>\n <tr style=\"text-align: left;\">\n      <th>Step</th>\n      <th>Training Loss</th>\n      <th>Validation Loss</th>\n      <th>Accuracy</th>\n      <th>F1</th>\n      <th>Precision</th>\n      <th>Recall</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>300</td>\n      <td>No log</td>\n      <td>0.577792</td>\n      <td>0.788321</td>\n      <td>0.822630</td>\n      <td>0.791176</td>\n      <td>0.856688</td>\n    </tr>\n  </tbody>\n</table><p>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":""},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x600 with 1 Axes>","image/png":""},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/4957 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"60d0c424fc94458cbb35864062a1f711"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/4957 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"947e0688d2a44091815ac04ec88c0524"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/4957 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"3882bc3db47749eeb6d37e7d6477ffbd"}},"metadata":{}},{"name":"stdout","text":"Agreement rate between all three models: 0.94\nNumber of samples where models disagree: 283\nExperiment for cardiffnlp/twitter-roberta-base-hate completed.\n--------------------\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## Model 2","metadata":{}},{"cell_type":"code","source":"model_name = \"tum-nlp/bert-hateXplain\"\nprint(f\"Running experiment for {model_name}\")\ntry:\n    results = run_experiment(model_name)\n    plot_results(results, model_name)\n    test_df, disagreements = analyze_results(results, test_df.copy())\n\n    all_results[model_name] = results\n\n    # Save disagreements to CSV\n    disagreements.to_csv(f'{model_name.split(\"/\")[-1]}_disagreements.csv', index=False)\n\n    print(f\"Experiment for {model_name} completed.\")\nexcept Exception as e:\n    print(f\"An error occurred during the experiment: {str(e)}\")\nfinally:\n    print(\"--------------------\")","metadata":{"execution":{"iopub.status.busy":"2024-07-04T23:25:03.428128Z","iopub.execute_input":"2024-07-04T23:25:03.429004Z","iopub.status.idle":"2024-07-04T23:28:48.207204Z","shell.execute_reply.started":"2024-07-04T23:25:03.428962Z","shell.execute_reply":"2024-07-04T23:28:48.206122Z"},"trusted":true},"execution_count":21,"outputs":[{"name":"stdout","text":"Running experiment for tum-nlp/bert-hateXplain\nTraining tum-nlp/bert-hateXplain on original perspective\nUsing device: cuda\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"tokenizer_config.json:   0%|          | 0.00/1.28k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"a8c938a72da5430dab3c5d3a683c25c6"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"tokenizer.json:   0%|          | 0.00/711k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"4d61514fe67c43c099910ef6b012b5e3"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"added_tokens.json:   0%|          | 0.00/82.0 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"8bbe6919bcd4409f8528b0177868ca9d"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"special_tokens_map.json:   0%|          | 0.00/125 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"0075a4f171ef4dbb8d7f2d2b70b099b1"}},"metadata":{}},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/huggingface_hub/file_download.py:1132: FutureWarning: `resume_download` is deprecated and will be removed in version 1.0.0. Downloads always resume when possible. If you want to force a new download, use `force_download=True`.\n  warnings.warn(\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"config.json:   0%|          | 0.00/822 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"b88e5ddf3e83475681c22ec3bda6c7bf"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"pytorch_model.bin:   0%|          | 0.00/44.7M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"b980e09f6abd44969eb791d596943379"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/4000 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"733ebdfc2009422cbc95253be35f7614"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/1000 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"0199861ed0474259a61b3632152082dc"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/4957 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"0115b566e32a4bf0aba599495670f84a"}},"metadata":{}},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/transformers/training_args.py:1474: FutureWarning: `evaluation_strategy` is deprecated and will be removed in version 4.46 of 🤗 Transformers. Use `eval_strategy` instead\n  warnings.warn(\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"\n    <div>\n      \n      <progress value='830' max='830' style='width:300px; height:20px; vertical-align: middle;'></progress>\n      [830/830 01:07, Epoch 4/5]\n    </div>\n    <table border=\"1\" class=\"dataframe\">\n  <thead>\n <tr style=\"text-align: left;\">\n      <th>Step</th>\n      <th>Training Loss</th>\n      <th>Validation Loss</th>\n      <th>Accuracy</th>\n      <th>F1</th>\n      <th>Precision</th>\n      <th>Recall</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>300</td>\n      <td>No log</td>\n      <td>0.194864</td>\n      <td>0.930000</td>\n      <td>0.959862</td>\n      <td>0.941507</td>\n      <td>0.978947</td>\n    </tr>\n    <tr>\n      <td>600</td>\n      <td>0.209600</td>\n      <td>0.206144</td>\n      <td>0.939000</td>\n      <td>0.964719</td>\n      <td>0.954233</td>\n      <td>0.975439</td>\n    </tr>\n  </tbody>\n</table><p>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":""},"metadata":{}},{"name":"stdout","text":"Training tum-nlp/bert-hateXplain on uncontroversial perspective\nUsing device: cuda\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"vocab.txt:   0%|          | 0.00/232k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"6b7a593ea10341bbaf9263893da8871d"}},"metadata":{}},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/huggingface_hub/file_download.py:1132: FutureWarning: `resume_download` is deprecated and will be removed in version 1.0.0. Downloads always resume when possible. If you want to force a new download, use `force_download=True`.\n  warnings.warn(\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/4000 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"a682ee1e9a3643baa8cedb17496bb235"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/1000 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"a0c8ba061ec64a5e8477e0c3cde938f8"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/4957 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"e5ae3701ebdd47f0b95605658a7d79c9"}},"metadata":{}},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/transformers/training_args.py:1474: FutureWarning: `evaluation_strategy` is deprecated and will be removed in version 4.46 of 🤗 Transformers. Use `eval_strategy` instead\n  warnings.warn(\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"\n    <div>\n      \n      <progress value='830' max='830' style='width:300px; height:20px; vertical-align: middle;'></progress>\n      [830/830 01:08, Epoch 4/5]\n    </div>\n    <table border=\"1\" class=\"dataframe\">\n  <thead>\n <tr style=\"text-align: left;\">\n      <th>Step</th>\n      <th>Training Loss</th>\n      <th>Validation Loss</th>\n      <th>Accuracy</th>\n      <th>F1</th>\n      <th>Precision</th>\n      <th>Recall</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>300</td>\n      <td>No log</td>\n      <td>0.111388</td>\n      <td>0.967000</td>\n      <td>0.981175</td>\n      <td>0.976163</td>\n      <td>0.986239</td>\n    </tr>\n    <tr>\n      <td>600</td>\n      <td>0.149500</td>\n      <td>0.094176</td>\n      <td>0.976000</td>\n      <td>0.986270</td>\n      <td>0.984018</td>\n      <td>0.988532</td>\n    </tr>\n  </tbody>\n</table><p>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":""},"metadata":{}},{"name":"stdout","text":"Training tum-nlp/bert-hateXplain on controversial perspective\nUsing device: cuda\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/huggingface_hub/file_download.py:1132: FutureWarning: `resume_download` is deprecated and will be removed in version 1.0.0. Downloads always resume when possible. If you want to force a new download, use `force_download=True`.\n  warnings.warn(\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/2191 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"6ad437dd3b72464ab0fc06c5b60c1789"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/548 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"0dd7bca2e868443a9c06c42a2b1a8d03"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/4957 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"853bd9f640ff45a8972c23183be58b19"}},"metadata":{}},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/transformers/training_args.py:1474: FutureWarning: `evaluation_strategy` is deprecated and will be removed in version 4.46 of 🤗 Transformers. Use `eval_strategy` instead\n  warnings.warn(\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"\n    <div>\n      \n      <progress value='455' max='455' style='width:300px; height:20px; vertical-align: middle;'></progress>\n      [455/455 00:37, Epoch 4/5]\n    </div>\n    <table border=\"1\" class=\"dataframe\">\n  <thead>\n <tr style=\"text-align: left;\">\n      <th>Step</th>\n      <th>Training Loss</th>\n      <th>Validation Loss</th>\n      <th>Accuracy</th>\n      <th>F1</th>\n      <th>Precision</th>\n      <th>Recall</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>300</td>\n      <td>No log</td>\n      <td>0.467128</td>\n      <td>0.782847</td>\n      <td>0.800000</td>\n      <td>0.846975</td>\n      <td>0.757962</td>\n    </tr>\n  </tbody>\n</table><p>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":""},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x600 with 1 Axes>","image/png":""},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/4957 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"f42dddb0d4e945f89636b61c1eea5958"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/4957 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"7987ce2c4b3244d3a3b1cc4bdc8a171a"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/4957 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"7b89b0c48f6444a283ac68d3244e3313"}},"metadata":{}},{"name":"stdout","text":"Agreement rate between all three models: 0.93\nNumber of samples where models disagree: 362\nExperiment for tum-nlp/bert-hateXplain completed.\n--------------------\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## Compare models","metadata":{}},{"cell_type":"code","source":"from transformers import TextClassificationPipeline\n\ndef compare_models(all_results, test_df, perspectives):\n    metrics = ['accuracy', 'f1', 'precision', 'recall']\n    comparison_results = {}\n    \n    for model_name, results in all_results.items():\n        model_metrics = {}\n        for metric in metrics:\n            model_metrics[metric] = np.mean([results[p]['eval_results'][f'eval_{metric}'] for p in perspectives])\n        comparison_results[model_name] = model_metrics\n    \n    # Create a DataFrame for easy comparison\n    df_comparison = pd.DataFrame(comparison_results).T\n    \n    # Plot comparison\n    fig, ax = plt.subplots(figsize=(12, 6))\n    df_comparison.plot(kind='bar', ax=ax)\n    \n    plt.title('Model Comparison Across Metrics')\n    plt.xlabel('Models')\n    plt.ylabel('Scores')\n    \n    # Rotate x-axis labels to horizontal and adjust their position\n    plt.xticks(rotation=0, ha='center')\n    \n    # Adjust the bottom margin to make room for the labels\n    plt.subplots_adjust(bottom=0.2)\n    \n    # Move the legend outside the plot\n    plt.legend(title='Metrics', bbox_to_anchor=(1.05, 1), loc='upper left')\n    \n    plt.tight_layout()\n    plt.savefig('model_comparison.png', bbox_inches='tight')\n    plt.show()\n    \n    # Analyze differences\n    if len(df_comparison.index) >= 2:\n        for metric in metrics:\n            diff = df_comparison.loc[df_comparison.index[0], metric] - df_comparison.loc[df_comparison.index[1], metric]\n            print(f\"Difference in {metric}: {diff:.4f}\")\n    \n    # Determine the best model\n    best_model = df_comparison['f1'].idxmax()\n    print(f\"\\nBest model based on F1 score: {best_model}\")\n    \n    # Additional analysis\n    print(\"\\nPer-perspective performance:\")\n    for model_name, results in all_results.items():\n        print(f\"\\n{model_name}:\")\n        for perspective, perspective_results in results.items():\n            print(f\"  {perspective}: F1 = {perspective_results['eval_results']['eval_f1']:.4f}\")\n    \n    # Agreement analysis\n    print(\"\\nAgreement analysis:\")\n    for model_name, results in all_results.items():\n        preds = {}\n        for p in perspectives:\n            pipeline = TextClassificationPipeline(model=results[p]['trainer'].model, tokenizer=results[p]['tokenizer'])\n            preds[p] = [pred['label'] for pred in pipeline(test_df['tweet'].tolist())]\n        \n        preds_df = pd.DataFrame(preds)\n        agreement = (preds_df['original'] == preds_df['uncontroversial']) & (preds_df['original'] == preds_df['controversial'])\n        print(f\"{model_name}: Agreement rate = {agreement.mean():.4f}\")\n    \n    return df_comparison\n\n# Usage\ndf_comparison = compare_models(all_results, test_df, perspectives)","metadata":{"execution":{"iopub.status.busy":"2024-07-04T23:28:48.215435Z","iopub.execute_input":"2024-07-04T23:28:48.215736Z","iopub.status.idle":"2024-07-04T23:33:53.146698Z","shell.execute_reply.started":"2024-07-04T23:28:48.215710Z","shell.execute_reply":"2024-07-04T23:33:53.145660Z"},"trusted":true},"execution_count":22,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x600 with 1 Axes>","image/png":""},"metadata":{}},{"name":"stdout","text":"Difference in accuracy: 0.0184\nDifference in f1: 0.0112\nDifference in precision: 0.0078\nDifference in recall: 0.0143\n\nBest model based on F1 score: cardiffnlp/twitter-roberta-base-hate\n\nPer-perspective performance:\n\ncardiffnlp/twitter-roberta-base-hate:\n  original: F1 = 0.9942\n  uncontroversial: F1 = 0.9782\n  controversial: F1 = 0.9793\n\ntum-nlp/bert-hateXplain:\n  original: F1 = 0.9838\n  uncontroversial: F1 = 0.9708\n  controversial: F1 = 0.9636\n\nAgreement analysis:\ncardiffnlp/twitter-roberta-base-hate: Agreement rate = 0.9429\ntum-nlp/bert-hateXplain: Agreement rate = 0.9272\n","output_type":"stream"}]},{"cell_type":"code","source":"df_comparison","metadata":{"execution":{"iopub.status.busy":"2024-07-04T23:33:53.150921Z","iopub.execute_input":"2024-07-04T23:33:53.151206Z","iopub.status.idle":"2024-07-04T23:33:53.162935Z"},"trusted":true},"execution_count":null,"outputs":[{"execution_count":23,"output_type":"execute_result","data":{"text/plain":"                                      accuracy        f1  precision    recall\ncardiffnlp/twitter-roberta-base-hate  0.973237  0.983914   0.986226  0.981620\ntum-nlp/bert-hateXplain               0.954879  0.972717   0.978386  0.967352","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>accuracy</th>\n      <th>f1</th>\n      <th>precision</th>\n      <th>recall</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>cardiffnlp/twitter-roberta-base-hate</th>\n      <td>0.973237</td>\n      <td>0.983914</td>\n      <td>0.986226</td>\n      <td>0.981620</td>\n    </tr>\n    <tr>\n      <th>tum-nlp/bert-hateXplain</th>\n      <td>0.954879</td>\n      <td>0.972717</td>\n      <td>0.978386</td>\n      <td>0.967352</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"## Preliminary findings","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.metrics import classification_report\n\ndef analyze_annotation_perspectives(df, perspectives):\n    results = {}\n    original_hate_speech_ratio = df[df['binary_class'] == 1].shape[0] / df.shape[0]\n    \n    for perspective, perspective_df in perspectives.items():\n        hate_speech_ratio = perspective_df[perspective_df['binary_class'] == 1].shape[0] / perspective_df.shape[0]\n        change = (hate_speech_ratio - original_hate_speech_ratio) / original_hate_speech_ratio * 100\n        results[perspective] = {\n            'hate_speech_ratio': hate_speech_ratio,\n            'change_from_original': change\n        }\n    \n    return results\n\ndef plot_label_distribution(annotation_results):\n    perspectives = list(annotation_results.keys())\n    ratios = [result['hate_speech_ratio'] for result in annotation_results.values()]\n    \n    plt.figure(figsize=(10, 6))\n    sns.barplot(x=perspectives, y=ratios)\n    plt.title('Hate Speech Label Distribution Across Perspectives')\n    plt.ylabel('Ratio of Hate Speech Labels')\n    plt.xticks(rotation=45)\n    plt.tight_layout()\n    plt.savefig('label_distribution.png')\n    plt.show()\n\n\n# Assuming 'df' is your original dataframe and 'perspectives' is your dictionary of perspective dataframes\nannotation_results = analyze_annotation_perspectives(df, perspectives)\n\nprint(\"Annotation Perspectives:\")\nfor perspective, result in annotation_results.items():\n    print(f\"- {perspective} perspective changed hate speech labels by {result['change_from_original']:.2f}%\")\n\nplot_label_distribution(annotation_results)","metadata":{"execution":{"iopub.status.busy":"2024-07-04T23:33:53.164315Z","iopub.execute_input":"2024-07-04T23:33:53.164630Z","iopub.status.idle":"2024-07-04T23:33:53.520673Z"},"trusted":true},"execution_count":null,"outputs":[{"name":"stdout","text":"Annotation Perspectives:\n- original perspective changed hate speech labels by 0.33%\n- uncontroversial perspective changed hate speech labels by 4.56%\n- controversial perspective changed hate speech labels by -32.99%\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1765: FutureWarning: unique with argument that is not not a Series, Index, ExtensionArray, or np.ndarray is deprecated and will raise in a future version.\n  order = pd.unique(vector)\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x600 with 1 Axes>","image/png":""},"metadata":{}}]}]}
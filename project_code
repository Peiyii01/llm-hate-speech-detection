{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8409280,"sourceType":"datasetVersion","datasetId":5004634}],"dockerImageVersionId":30732,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom transformers import (\n    AutoTokenizer, \n    AutoModelForSequenceClassification, \n    TrainingArguments, \n    Trainer, \n    AutoConfig, \n    EarlyStoppingCallback,\n    DataCollatorWithPadding\n)\nfrom datasets import Dataset, concatenate_datasets\nimport gc\nimport torch\nfrom sklearn.metrics import accuracy_score, precision_recall_fscore_support\nimport matplotlib.pyplot as plt","metadata":{"execution":{"iopub.status.busy":"2024-07-04T19:52:35.890222Z","iopub.execute_input":"2024-07-04T19:52:35.891043Z","iopub.status.idle":"2024-07-04T19:52:36.326394Z","shell.execute_reply.started":"2024-07-04T19:52:35.891013Z","shell.execute_reply":"2024-07-04T19:52:36.325619Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"df = pd.read_csv('/kaggle/input/hatespeech/labeled_data.csv')","metadata":{"execution":{"iopub.status.busy":"2024-07-04T19:52:36.328119Z","iopub.execute_input":"2024-07-04T19:52:36.328949Z","iopub.status.idle":"2024-07-04T19:52:36.415574Z","shell.execute_reply.started":"2024-07-04T19:52:36.328914Z","shell.execute_reply":"2024-07-04T19:52:36.414724Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"df.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-04T19:52:36.639845Z","iopub.execute_input":"2024-07-04T19:52:36.640178Z","iopub.status.idle":"2024-07-04T19:52:36.660727Z","shell.execute_reply.started":"2024-07-04T19:52:36.640153Z","shell.execute_reply":"2024-07-04T19:52:36.659853Z"},"trusted":true},"execution_count":5,"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"   Unnamed: 0  count  hate_speech  offensive_language  neither  class  \\\n0           0      3            0                   0        3      2   \n1           1      3            0                   3        0      1   \n2           2      3            0                   3        0      1   \n3           3      3            0                   2        1      1   \n4           4      6            0                   6        0      1   \n\n                                               tweet  \n0  !!! RT @mayasolovely: As a woman you shouldn't...  \n1  !!!!! RT @mleew17: boy dats cold...tyga dwn ba...  \n2  !!!!!!! RT @UrKindOfBrand Dawg!!!! RT @80sbaby...  \n3  !!!!!!!!! RT @C_G_Anderson: @viva_based she lo...  \n4  !!!!!!!!!!!!! RT @ShenikaRoberts: The shit you...  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Unnamed: 0</th>\n      <th>count</th>\n      <th>hate_speech</th>\n      <th>offensive_language</th>\n      <th>neither</th>\n      <th>class</th>\n      <th>tweet</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>0</td>\n      <td>3</td>\n      <td>2</td>\n      <td>!!! RT @mayasolovely: As a woman you shouldn't...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>3</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>1</td>\n      <td>!!!!! RT @mleew17: boy dats cold...tyga dwn ba...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>3</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>1</td>\n      <td>!!!!!!! RT @UrKindOfBrand Dawg!!!! RT @80sbaby...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>3</td>\n      <td>0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>!!!!!!!!! RT @C_G_Anderson: @viva_based she lo...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>6</td>\n      <td>0</td>\n      <td>6</td>\n      <td>0</td>\n      <td>1</td>\n      <td>!!!!!!!!!!!!! RT @ShenikaRoberts: The shit you...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df.drop(columns=df.columns[0], axis=1, inplace=True)\ndf.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-04T19:52:37.132976Z","iopub.execute_input":"2024-07-04T19:52:37.133818Z","iopub.status.idle":"2024-07-04T19:52:37.149389Z","shell.execute_reply.started":"2024-07-04T19:52:37.133782Z","shell.execute_reply":"2024-07-04T19:52:37.148391Z"},"trusted":true},"execution_count":6,"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"   count  hate_speech  offensive_language  neither  class  \\\n0      3            0                   0        3      2   \n1      3            0                   3        0      1   \n2      3            0                   3        0      1   \n3      3            0                   2        1      1   \n4      6            0                   6        0      1   \n\n                                               tweet  \n0  !!! RT @mayasolovely: As a woman you shouldn't...  \n1  !!!!! RT @mleew17: boy dats cold...tyga dwn ba...  \n2  !!!!!!! RT @UrKindOfBrand Dawg!!!! RT @80sbaby...  \n3  !!!!!!!!! RT @C_G_Anderson: @viva_based she lo...  \n4  !!!!!!!!!!!!! RT @ShenikaRoberts: The shit you...  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>count</th>\n      <th>hate_speech</th>\n      <th>offensive_language</th>\n      <th>neither</th>\n      <th>class</th>\n      <th>tweet</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>3</td>\n      <td>0</td>\n      <td>0</td>\n      <td>3</td>\n      <td>2</td>\n      <td>!!! RT @mayasolovely: As a woman you shouldn't...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>1</td>\n      <td>!!!!! RT @mleew17: boy dats cold...tyga dwn ba...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>1</td>\n      <td>!!!!!!! RT @UrKindOfBrand Dawg!!!! RT @80sbaby...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>!!!!!!!!! RT @C_G_Anderson: @viva_based she lo...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>6</td>\n      <td>0</td>\n      <td>6</td>\n      <td>0</td>\n      <td>1</td>\n      <td>!!!!!!!!!!!!! RT @ShenikaRoberts: The shit you...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# Convert to binary classification\ndf['binary_class'] = (df['class'] != 2).astype(int)  # 0 for neither, 1 for hate speech or offensive language\ndf.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-04T19:52:37.603943Z","iopub.execute_input":"2024-07-04T19:52:37.604283Z","iopub.status.idle":"2024-07-04T19:52:37.618350Z","shell.execute_reply.started":"2024-07-04T19:52:37.604257Z","shell.execute_reply":"2024-07-04T19:52:37.617281Z"},"trusted":true},"execution_count":7,"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"   count  hate_speech  offensive_language  neither  class  \\\n0      3            0                   0        3      2   \n1      3            0                   3        0      1   \n2      3            0                   3        0      1   \n3      3            0                   2        1      1   \n4      6            0                   6        0      1   \n\n                                               tweet  binary_class  \n0  !!! RT @mayasolovely: As a woman you shouldn't...             0  \n1  !!!!! RT @mleew17: boy dats cold...tyga dwn ba...             1  \n2  !!!!!!! RT @UrKindOfBrand Dawg!!!! RT @80sbaby...             1  \n3  !!!!!!!!! RT @C_G_Anderson: @viva_based she lo...             1  \n4  !!!!!!!!!!!!! RT @ShenikaRoberts: The shit you...             1  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>count</th>\n      <th>hate_speech</th>\n      <th>offensive_language</th>\n      <th>neither</th>\n      <th>class</th>\n      <th>tweet</th>\n      <th>binary_class</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>3</td>\n      <td>0</td>\n      <td>0</td>\n      <td>3</td>\n      <td>2</td>\n      <td>!!! RT @mayasolovely: As a woman you shouldn't...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>1</td>\n      <td>!!!!! RT @mleew17: boy dats cold...tyga dwn ba...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>1</td>\n      <td>!!!!!!! RT @UrKindOfBrand Dawg!!!! RT @80sbaby...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>!!!!!!!!! RT @C_G_Anderson: @viva_based she lo...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>6</td>\n      <td>0</td>\n      <td>6</td>\n      <td>0</td>\n      <td>1</td>\n      <td>!!!!!!!!!!!!! RT @ShenikaRoberts: The shit you...</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"print(df.info())","metadata":{"execution":{"iopub.status.busy":"2024-07-04T19:52:38.041599Z","iopub.execute_input":"2024-07-04T19:52:38.041964Z","iopub.status.idle":"2024-07-04T19:52:38.066692Z","shell.execute_reply.started":"2024-07-04T19:52:38.041927Z","shell.execute_reply":"2024-07-04T19:52:38.065785Z"},"trusted":true},"execution_count":8,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 24783 entries, 0 to 24782\nData columns (total 7 columns):\n #   Column              Non-Null Count  Dtype \n---  ------              --------------  ----- \n 0   count               24783 non-null  int64 \n 1   hate_speech         24783 non-null  int64 \n 2   offensive_language  24783 non-null  int64 \n 3   neither             24783 non-null  int64 \n 4   class               24783 non-null  int64 \n 5   tweet               24783 non-null  object\n 6   binary_class        24783 non-null  int64 \ndtypes: int64(6), object(1)\nmemory usage: 1.3+ MB\nNone\n","output_type":"stream"}]},{"cell_type":"code","source":"import seaborn as sns\n\ndef calculate_confidence_levels(df):\n    # Calculate confidence levels\n    df['hate_and_offensive'] = (df['hate_speech'] +  df['offensive_language']) / df['count']\n    df['neither_confidence'] = df['neither'] / df['count']\n    \n    return df","metadata":{"execution":{"iopub.status.busy":"2024-07-04T19:52:38.465166Z","iopub.execute_input":"2024-07-04T19:52:38.465531Z","iopub.status.idle":"2024-07-04T19:52:38.470265Z","shell.execute_reply.started":"2024-07-04T19:52:38.465501Z","shell.execute_reply":"2024-07-04T19:52:38.469316Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"code","source":"def plot_annotation_confidence(df):\n    # Set up the plot style\n    plt.figure(figsize=(8, 6))\n\n    # Plot hate speech confidence\n    sns.histplot(df['hate_and_offensive'])\n    plt.title('Distribution of Hate Speech and Offensive Language Annotation Confidence')\n    plt.xlabel('Confidence Level')\n    plt.ylabel('Count')\n    \n    plt.tight_layout()\n    plt.savefig('annotation_confidence_distribution.png')\n    plt.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Calculate confidence levels\ndf = calculate_confidence_levels(df)\n\n# Plot the distributions\nplot_annotation_confidence(df)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Print some statistics\nprint(\"Hate Speech and Offensive Language Confidence Statistics:\")\nprint(df['hate_and_offensive'].describe())\nprint(\"\\nNeither Confidence Statistics:\")\nprint(df['neither_confidence'].describe())","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<h3>Data Preparation</h3>","metadata":{}},{"cell_type":"code","source":"# Create annotation perspectives\ndef create_annotation_perspectives(df, agreement_threshold=0.75):\n    total_votes = df['count']\n    inappropriate_votes = df['hate_speech'] + df['offensive_language']\n    agreement_ratio = np.maximum(inappropriate_votes, df['neither']) / total_votes\n    \n    original = df[['tweet', 'binary_class']]\n    uncontroversial = df[agreement_ratio >= agreement_threshold][['tweet', 'binary_class']]\n    controversial = df[agreement_ratio < agreement_threshold][['tweet', 'binary_class']]\n    \n    return {\n        'original': original,\n        'uncontroversial': uncontroversial,\n        'controversial': controversial\n    }","metadata":{"execution":{"iopub.status.busy":"2024-07-04T19:52:41.351200Z","iopub.execute_input":"2024-07-04T19:52:41.351894Z","iopub.status.idle":"2024-07-04T19:52:41.358050Z","shell.execute_reply.started":"2024-07-04T19:52:41.351860Z","shell.execute_reply":"2024-07-04T19:52:41.356995Z"},"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"code","source":"perspectives = create_annotation_perspectives(df)\n\n# Create a combined test set (20% of the original data)\ntrain_df, test_df = train_test_split(df[['tweet', 'binary_class']], test_size=0.2, random_state=27)\n\n# Limit training data to 5k samples for each perspective\nfor perspective in perspectives:\n    if len(perspectives[perspective]) > 5000:\n        perspectives[perspective] = perspectives[perspective].sample(n=5000, random_state=27)","metadata":{"execution":{"iopub.status.busy":"2024-07-04T19:52:41.710842Z","iopub.execute_input":"2024-07-04T19:52:41.711179Z","iopub.status.idle":"2024-07-04T19:52:41.736822Z","shell.execute_reply.started":"2024-07-04T19:52:41.711154Z","shell.execute_reply":"2024-07-04T19:52:41.736074Z"},"trusted":true},"execution_count":11,"outputs":[]},{"cell_type":"code","source":"# Compute metrics function\ndef compute_metrics(pred):\n    labels = pred.label_ids\n    preds = pred.predictions.argmax(-1)\n    precision, recall, f1, _ = precision_recall_fscore_support(labels, preds, average='binary')\n    acc = accuracy_score(labels, preds)\n    return {\n        'accuracy': acc,\n        'f1': f1,\n        'precision': precision,\n        'recall': recall\n    }","metadata":{"execution":{"iopub.status.busy":"2024-07-04T19:52:42.151983Z","iopub.execute_input":"2024-07-04T19:52:42.152373Z","iopub.status.idle":"2024-07-04T19:52:42.158079Z","shell.execute_reply.started":"2024-07-04T19:52:42.152318Z","shell.execute_reply":"2024-07-04T19:52:42.157167Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"code","source":"# Train and evaluate model function\ndef train_evaluate_model(train_df, val_df, test_df, model_name, output_dir):\n    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n    print(f\"Using device: {device}\")\n\n    tokenizer = AutoTokenizer.from_pretrained(model_name)\n    \n    config = AutoConfig.from_pretrained(model_name)\n    config.num_labels = 2  # Binary classification\n    \n    model = AutoModelForSequenceClassification.from_pretrained(\n        model_name,\n        config=config,\n        ignore_mismatched_sizes=True\n    ).to(device)\n\n    def tokenize_function(examples):\n        return tokenizer(examples[\"tweet\"], padding=False, truncation=True, max_length=128)\n\n    train_dataset = Dataset.from_pandas(train_df)\n    val_dataset = Dataset.from_pandas(val_df)\n    test_dataset = Dataset.from_pandas(test_df)\n    \n    tokenized_train = train_dataset.map(tokenize_function, batched=True)\n    tokenized_val = val_dataset.map(tokenize_function, batched=True)\n    tokenized_test = test_dataset.map(tokenize_function, batched=True)\n\n    # Set the format to pytorch tensors and ensure labels are included\n    tokenized_train.set_format(type='torch', columns=['input_ids', 'attention_mask', 'binary_class'], output_all_columns=True)\n    tokenized_val.set_format(type='torch', columns=['input_ids', 'attention_mask', 'binary_class'], output_all_columns=True)\n    tokenized_test.set_format(type='torch', columns=['input_ids', 'attention_mask', 'binary_class'], output_all_columns=True)\n\n    # Rename 'binary_class' to 'labels' as expected by the model\n    tokenized_train = tokenized_train.rename_column(\"binary_class\", \"labels\")\n    tokenized_val = tokenized_val.rename_column(\"binary_class\", \"labels\")\n    tokenized_test = tokenized_test.rename_column(\"binary_class\", \"labels\")\n\n    # Create a data collator\n    data_collator = DataCollatorWithPadding(tokenizer=tokenizer)\n\n    training_args = TrainingArguments(\n        output_dir=output_dir,\n        num_train_epochs=5,\n        per_device_train_batch_size=8,\n        per_device_eval_batch_size=16,\n        gradient_accumulation_steps=3,\n        warmup_steps=300,\n        weight_decay=0.01,\n        logging_dir='./logs',\n        evaluation_strategy=\"steps\",\n        eval_steps=300,\n        save_steps=300,\n        load_best_model_at_end=True,\n        metric_for_best_model=\"f1\",\n        report_to=\"none\",  # This disables wandb and other integrations\n        fp16=True if torch.cuda.is_available() else False,\n        save_total_limit=2,\n        remove_unused_columns=True  # Remove unused columns to save memory\n    )\n\n    # Early stopping callback\n    early_stopping_callback = EarlyStoppingCallback(\n        early_stopping_patience=3,\n        early_stopping_threshold=0.01\n    )\n\n    trainer = Trainer(\n        model=model,\n        args=training_args,\n        train_dataset=tokenized_train,\n        eval_dataset=tokenized_val,\n        data_collator=data_collator,\n        compute_metrics=compute_metrics,\n        callbacks=[early_stopping_callback]\n    )\n\n    try:\n        trainer.train()\n    except RuntimeError as e:\n        if \"CUDA out of memory\" in str(e):\n            print(\"CUDA out of memory. Falling back to CPU.\")\n            device = torch.device(\"cpu\")\n            model = model.to(device)\n            trainer = Trainer(\n                model=model,\n                args=training_args,\n                train_dataset=tokenized_train,\n                eval_dataset=tokenized_val,\n                data_collator=data_collator,\n                compute_metrics=compute_metrics,\n                callbacks=[early_stopping_callback]\n            )\n            trainer.train()\n        else:\n            raise e\n\n    eval_results = trainer.evaluate(tokenized_test)\n    \n    return trainer, eval_results, tokenizer","metadata":{"execution":{"iopub.status.busy":"2024-07-04T19:52:42.574961Z","iopub.execute_input":"2024-07-04T19:52:42.575283Z","iopub.status.idle":"2024-07-04T19:52:42.591440Z","shell.execute_reply.started":"2024-07-04T19:52:42.575258Z","shell.execute_reply":"2024-07-04T19:52:42.590502Z"},"trusted":true},"execution_count":13,"outputs":[]},{"cell_type":"code","source":"# Function to run experiments for a specific model\ndef run_experiment(model_name):\n    results = {}\n\n    for perspective_name, perspective_data in perspectives.items():\n        print(f\"Training {model_name} on {perspective_name} perspective\")\n        \n        # Split the perspective data into train and validation\n        train_df, val_df = train_test_split(perspective_data, test_size=0.2, random_state=27)\n        \n        trainer, eval_results, tokenizer = train_evaluate_model(\n            train_df, val_df, test_df, model_name, f\"./results/{model_name}/{perspective_name}\"\n        )\n        results[perspective_name] = {\n            'trainer': trainer,\n            'eval_results': eval_results,\n            'tokenizer': tokenizer\n        }\n\n    return results","metadata":{"execution":{"iopub.status.busy":"2024-07-04T19:52:43.004241Z","iopub.execute_input":"2024-07-04T19:52:43.004589Z","iopub.status.idle":"2024-07-04T19:52:43.010856Z","shell.execute_reply.started":"2024-07-04T19:52:43.004563Z","shell.execute_reply":"2024-07-04T19:52:43.009980Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"code","source":"# Visualization function\ndef plot_results(results, model_name):\n    perspectives = list(results.keys())\n    metrics = ['accuracy', 'f1', 'precision', 'recall']\n    \n    fig, ax = plt.subplots(figsize=(12, 6))\n    x = np.arange(len(perspectives))\n    width = 0.2\n    \n    for i, metric in enumerate(metrics):\n        values = [results[p]['eval_results'][f'eval_{metric}'] for p in perspectives]\n        ax.bar(x + i*width, values, width, label=metric)\n    \n    ax.set_ylabel('Scores')\n    ax.set_title(f'{model_name} Performance Across Annotation Perspectives (Binary Classification)')\n    ax.set_xticks(x + width * 1.5)\n    ax.set_xticklabels(perspectives)\n    ax.legend(loc='lower right')\n    ax.set_ylim(0, 1)\n    \n    plt.tight_layout()\n    plt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-04T19:52:43.479501Z","iopub.execute_input":"2024-07-04T19:52:43.480440Z","iopub.status.idle":"2024-07-04T19:52:43.489791Z","shell.execute_reply.started":"2024-07-04T19:52:43.480399Z","shell.execute_reply":"2024-07-04T19:52:43.488799Z"},"trusted":true},"execution_count":15,"outputs":[]},{"cell_type":"code","source":"# Analysis function\ndef analyze_results(results, test_df):\n    for perspective_name, perspective_results in results.items():\n        trainer = perspective_results['trainer']\n        tokenizer = perspective_results['tokenizer']\n        tokenized_test = Dataset.from_pandas(test_df).map(\n            lambda examples: tokenizer(examples[\"tweet\"], padding=\"max_length\", truncation=True, max_length=128),\n            batched=True\n        )\n        tokenized_test = tokenized_test.rename_column(\"binary_class\", \"labels\")\n        preds = trainer.predict(tokenized_test).predictions.argmax(-1)\n        test_df[f'{perspective_name}_pred'] = preds\n\n    # Calculate agreement between models\n    model_agreement = (test_df['original_pred'] == test_df['uncontroversial_pred']) & \\\n                      (test_df['original_pred'] == test_df['controversial_pred'])\n    agreement_rate = model_agreement.mean()\n\n    print(f\"Agreement rate between all three models: {agreement_rate:.2f}\")\n\n    # Analyze disagreements\n    disagreements = test_df[~model_agreement]\n    print(f\"Number of samples where models disagree: {len(disagreements)}\")\n\n    return test_df, disagreements","metadata":{"execution":{"iopub.status.busy":"2024-07-04T19:52:43.864131Z","iopub.execute_input":"2024-07-04T19:52:43.864508Z","iopub.status.idle":"2024-07-04T19:52:43.872611Z","shell.execute_reply.started":"2024-07-04T19:52:43.864479Z","shell.execute_reply":"2024-07-04T19:52:43.871384Z"},"trusted":true},"execution_count":16,"outputs":[]},{"cell_type":"markdown","source":"# Model Training","metadata":{}},{"cell_type":"code","source":"all_results = {}","metadata":{"execution":{"iopub.status.busy":"2024-07-04T19:52:45.016615Z","iopub.execute_input":"2024-07-04T19:52:45.017331Z","iopub.status.idle":"2024-07-04T19:52:45.021288Z","shell.execute_reply.started":"2024-07-04T19:52:45.017289Z","shell.execute_reply":"2024-07-04T19:52:45.020391Z"},"trusted":true},"execution_count":17,"outputs":[]},{"cell_type":"markdown","source":"## cardiffnlp/twitter-roberta-base-hate","metadata":{}},{"cell_type":"code","source":"model_name = \"cardiffnlp/twitter-roberta-base-hate\"\nprint(f\"Running experiment for {model_name}\")\n\ntry:\n    results = run_experiment(model_name)\n    plot_results(results, model_name)\n    test_df, disagreements = analyze_results(results, test_df.copy())\n\n    all_results[model_name] = results\n\n    # Save disagreements to CSV\n    disagreements.to_csv(f'{model_name.split(\"/\")[-1]}_disagreements.csv', index=False)\n\n    print(f\"Experiment for {model_name} completed.\")\nexcept Exception as e:\n    print(f\"An error occurred during the experiment: {str(e)}\")\nfinally:\n    print(\"--------------------\")","metadata":{"execution":{"iopub.status.busy":"2024-07-04T19:52:45.773525Z","iopub.execute_input":"2024-07-04T19:52:45.774144Z","iopub.status.idle":"2024-07-04T20:03:28.911200Z","shell.execute_reply.started":"2024-07-04T19:52:45.774113Z","shell.execute_reply":"2024-07-04T20:03:28.910295Z"},"trusted":true},"execution_count":18,"outputs":[{"name":"stdout","text":"Running experiment for cardiffnlp/twitter-roberta-base-hate\nTraining cardiffnlp/twitter-roberta-base-hate on original perspective\nUsing device: cuda\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/huggingface_hub/file_download.py:1132: FutureWarning: `resume_download` is deprecated and will be removed in version 1.0.0. Downloads always resume when possible. If you want to force a new download, use `force_download=True`.\n  warnings.warn(\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"config.json:   0%|          | 0.00/700 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"16dfe04d602f4f75b45f9eda50b72ab5"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"vocab.json:   0%|          | 0.00/899k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"9226338caf6544bdb530e4b0e95376da"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"merges.txt:   0%|          | 0.00/456k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"fa73d0210e054f3f9b5b183ff315d0de"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"special_tokens_map.json:   0%|          | 0.00/150 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"574bae6ea53b4eeda189418f78790d59"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"pytorch_model.bin:   0%|          | 0.00/499M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"bf2ea8ad1b254248aff99207a723f9d6"}},"metadata":{}},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/torch/_utils.py:831: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()\n  return self.fget.__get__(instance, owner)()\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/4000 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"df976cc148a64236a5265c214989243c"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/1000 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"5ca09e2fe06d4140996f939700a486e4"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/4957 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"83067f4cc84e4f3f8553675d1d5b3842"}},"metadata":{}},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/transformers/training_args.py:1474: FutureWarning: `evaluation_strategy` is deprecated and will be removed in version 4.46 of 🤗 Transformers. Use `eval_strategy` instead\n  warnings.warn(\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"\n    <div>\n      \n      <progress value='830' max='830' style='width:300px; height:20px; vertical-align: middle;'></progress>\n      [830/830 03:26, Epoch 4/5]\n    </div>\n    <table border=\"1\" class=\"dataframe\">\n  <thead>\n <tr style=\"text-align: left;\">\n      <th>Step</th>\n      <th>Training Loss</th>\n      <th>Validation Loss</th>\n      <th>Accuracy</th>\n      <th>F1</th>\n      <th>Precision</th>\n      <th>Recall</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>300</td>\n      <td>No log</td>\n      <td>0.158978</td>\n      <td>0.959000</td>\n      <td>0.976287</td>\n      <td>0.965675</td>\n      <td>0.987135</td>\n    </tr>\n    <tr>\n      <td>600</td>\n      <td>0.158100</td>\n      <td>0.206988</td>\n      <td>0.964000</td>\n      <td>0.978848</td>\n      <td>0.983471</td>\n      <td>0.974269</td>\n    </tr>\n  </tbody>\n</table><p>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":""},"metadata":{}},{"name":"stdout","text":"Training cardiffnlp/twitter-roberta-base-hate on uncontroversial perspective\nUsing device: cuda\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/huggingface_hub/file_download.py:1132: FutureWarning: `resume_download` is deprecated and will be removed in version 1.0.0. Downloads always resume when possible. If you want to force a new download, use `force_download=True`.\n  warnings.warn(\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/4000 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"f25b8c4df8c34dd79246a660a39b7fbd"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/1000 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"9b3dac08a6da4626ac0c5fae13211493"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/4957 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"61a4a01f84d94d948074fe81d93e9dea"}},"metadata":{}},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/transformers/training_args.py:1474: FutureWarning: `evaluation_strategy` is deprecated and will be removed in version 4.46 of 🤗 Transformers. Use `eval_strategy` instead\n  warnings.warn(\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"\n    <div>\n      \n      <progress value='830' max='830' style='width:300px; height:20px; vertical-align: middle;'></progress>\n      [830/830 03:27, Epoch 4/5]\n    </div>\n    <table border=\"1\" class=\"dataframe\">\n  <thead>\n <tr style=\"text-align: left;\">\n      <th>Step</th>\n      <th>Training Loss</th>\n      <th>Validation Loss</th>\n      <th>Accuracy</th>\n      <th>F1</th>\n      <th>Precision</th>\n      <th>Recall</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>300</td>\n      <td>No log</td>\n      <td>0.054771</td>\n      <td>0.983000</td>\n      <td>0.990280</td>\n      <td>0.987457</td>\n      <td>0.993119</td>\n    </tr>\n    <tr>\n      <td>600</td>\n      <td>0.098200</td>\n      <td>0.086138</td>\n      <td>0.987000</td>\n      <td>0.992542</td>\n      <td>0.993111</td>\n      <td>0.991972</td>\n    </tr>\n  </tbody>\n</table><p>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":""},"metadata":{}},{"name":"stdout","text":"Training cardiffnlp/twitter-roberta-base-hate on controversial perspective\nUsing device: cuda\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/huggingface_hub/file_download.py:1132: FutureWarning: `resume_download` is deprecated and will be removed in version 1.0.0. Downloads always resume when possible. If you want to force a new download, use `force_download=True`.\n  warnings.warn(\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/2191 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"1ba0c5a646564308802e634a877160fe"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/548 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"8f9bb8da015e4246ae4ae4de34c6b219"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/4957 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"51d5ed7e6dfc431e8459ccdf7c7fe951"}},"metadata":{}},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/transformers/training_args.py:1474: FutureWarning: `evaluation_strategy` is deprecated and will be removed in version 4.46 of 🤗 Transformers. Use `eval_strategy` instead\n  warnings.warn(\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"\n    <div>\n      \n      <progress value='455' max='455' style='width:300px; height:20px; vertical-align: middle;'></progress>\n      [455/455 01:52, Epoch 4/5]\n    </div>\n    <table border=\"1\" class=\"dataframe\">\n  <thead>\n <tr style=\"text-align: left;\">\n      <th>Step</th>\n      <th>Training Loss</th>\n      <th>Validation Loss</th>\n      <th>Accuracy</th>\n      <th>F1</th>\n      <th>Precision</th>\n      <th>Recall</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>300</td>\n      <td>No log</td>\n      <td>0.577792</td>\n      <td>0.788321</td>\n      <td>0.822630</td>\n      <td>0.791176</td>\n      <td>0.856688</td>\n    </tr>\n  </tbody>\n</table><p>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":""},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x600 with 1 Axes>","image/png":""},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/4957 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"324e95152b154a2fb72e75703aba9711"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/4957 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"4a128c4b027740c59eef658136ae9a3e"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/4957 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"becc191378cf439585c6b7a9f003cc69"}},"metadata":{}},{"name":"stdout","text":"Agreement rate between all three models: 0.94\nNumber of samples where models disagree: 283\nExperiment for cardiffnlp/twitter-roberta-base-hate completed.\n--------------------\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## Model 2","metadata":{}},{"cell_type":"code","source":"model_name = \"tum-nlp/bert-hateXplain\"\nprint(f\"Running experiment for {model_name}\")\ntry:\n    results = run_experiment(model_name)\n    plot_results(results, model_name)\n    test_df, disagreements = analyze_results(results, test_df.copy())\n\n    all_results[model_name] = results\n\n    # Save disagreements to CSV\n    disagreements.to_csv(f'{model_name.split(\"/\")[-1]}_disagreements.csv', index=False)\n\n    print(f\"Experiment for {model_name} completed.\")\nexcept Exception as e:\n    print(f\"An error occurred during the experiment: {str(e)}\")\nfinally:\n    print(\"--------------------\")","metadata":{"execution":{"iopub.status.busy":"2024-07-04T20:03:28.912667Z","iopub.execute_input":"2024-07-04T20:03:28.912958Z","iopub.status.idle":"2024-07-04T20:06:28.407727Z","shell.execute_reply.started":"2024-07-04T20:03:28.912932Z","shell.execute_reply":"2024-07-04T20:06:28.406862Z"},"trusted":true},"execution_count":19,"outputs":[{"name":"stdout","text":"Running experiment for tum-nlp/bert-hateXplain\nTraining tum-nlp/bert-hateXplain on original perspective\nUsing device: cuda\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"tokenizer_config.json:   0%|          | 0.00/1.28k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"cab99bf06e484afb93ddef2548d341cc"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"vocab.txt:   0%|          | 0.00/232k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"b6d6864352414a4e96aacccc4d1095d7"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"tokenizer.json:   0%|          | 0.00/711k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"bd81b85a5f6e40d2a1b581c41f710b92"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"added_tokens.json:   0%|          | 0.00/82.0 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"08ade7eda35640c5a48a1e06da9d7ce9"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"special_tokens_map.json:   0%|          | 0.00/125 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"d6f98150d58c4105b49207514ff29e1e"}},"metadata":{}},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/huggingface_hub/file_download.py:1132: FutureWarning: `resume_download` is deprecated and will be removed in version 1.0.0. Downloads always resume when possible. If you want to force a new download, use `force_download=True`.\n  warnings.warn(\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"config.json:   0%|          | 0.00/822 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"163c66bde495444182be77bca2c2a5e1"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"pytorch_model.bin:   0%|          | 0.00/44.7M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"aa04fb72ace34621bb9ced69dec67237"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/4000 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"b658de00ecdd4085a61a4ddc90109033"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/1000 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"9a314f778d384aeeac5b1998a1e7a9d6"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/4957 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"3ddb89dba6a04f4daefaf73612eeaa73"}},"metadata":{}},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/transformers/training_args.py:1474: FutureWarning: `evaluation_strategy` is deprecated and will be removed in version 4.46 of 🤗 Transformers. Use `eval_strategy` instead\n  warnings.warn(\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"\n    <div>\n      \n      <progress value='830' max='830' style='width:300px; height:20px; vertical-align: middle;'></progress>\n      [830/830 00:55, Epoch 4/5]\n    </div>\n    <table border=\"1\" class=\"dataframe\">\n  <thead>\n <tr style=\"text-align: left;\">\n      <th>Step</th>\n      <th>Training Loss</th>\n      <th>Validation Loss</th>\n      <th>Accuracy</th>\n      <th>F1</th>\n      <th>Precision</th>\n      <th>Recall</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>300</td>\n      <td>No log</td>\n      <td>0.194864</td>\n      <td>0.930000</td>\n      <td>0.959862</td>\n      <td>0.941507</td>\n      <td>0.978947</td>\n    </tr>\n    <tr>\n      <td>600</td>\n      <td>0.209600</td>\n      <td>0.206144</td>\n      <td>0.939000</td>\n      <td>0.964719</td>\n      <td>0.954233</td>\n      <td>0.975439</td>\n    </tr>\n  </tbody>\n</table><p>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":""},"metadata":{}},{"name":"stdout","text":"Training tum-nlp/bert-hateXplain on uncontroversial perspective\nUsing device: cuda\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/huggingface_hub/file_download.py:1132: FutureWarning: `resume_download` is deprecated and will be removed in version 1.0.0. Downloads always resume when possible. If you want to force a new download, use `force_download=True`.\n  warnings.warn(\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/4000 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"bd8a4421eb724ee0ba8c443d64f17b8d"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/1000 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"bcb74af8583e4bc6b98129a720f09af8"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/4957 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"d90c669ae1fa4b44b7162ce186ec225b"}},"metadata":{}},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/transformers/training_args.py:1474: FutureWarning: `evaluation_strategy` is deprecated and will be removed in version 4.46 of 🤗 Transformers. Use `eval_strategy` instead\n  warnings.warn(\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"\n    <div>\n      \n      <progress value='830' max='830' style='width:300px; height:20px; vertical-align: middle;'></progress>\n      [830/830 00:56, Epoch 4/5]\n    </div>\n    <table border=\"1\" class=\"dataframe\">\n  <thead>\n <tr style=\"text-align: left;\">\n      <th>Step</th>\n      <th>Training Loss</th>\n      <th>Validation Loss</th>\n      <th>Accuracy</th>\n      <th>F1</th>\n      <th>Precision</th>\n      <th>Recall</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>300</td>\n      <td>No log</td>\n      <td>0.111388</td>\n      <td>0.967000</td>\n      <td>0.981175</td>\n      <td>0.976163</td>\n      <td>0.986239</td>\n    </tr>\n    <tr>\n      <td>600</td>\n      <td>0.149500</td>\n      <td>0.094176</td>\n      <td>0.976000</td>\n      <td>0.986270</td>\n      <td>0.984018</td>\n      <td>0.988532</td>\n    </tr>\n  </tbody>\n</table><p>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":""},"metadata":{}},{"name":"stdout","text":"Training tum-nlp/bert-hateXplain on controversial perspective\nUsing device: cuda\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/huggingface_hub/file_download.py:1132: FutureWarning: `resume_download` is deprecated and will be removed in version 1.0.0. Downloads always resume when possible. If you want to force a new download, use `force_download=True`.\n  warnings.warn(\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/2191 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"251221a6089a4d668325c88d1721a030"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/548 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"e1d9f647654f4b9c8ba5706375d75b4a"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/4957 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"d79c94009eb4435faa873160effb6365"}},"metadata":{}},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/transformers/training_args.py:1474: FutureWarning: `evaluation_strategy` is deprecated and will be removed in version 4.46 of 🤗 Transformers. Use `eval_strategy` instead\n  warnings.warn(\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"\n    <div>\n      \n      <progress value='455' max='455' style='width:300px; height:20px; vertical-align: middle;'></progress>\n      [455/455 00:30, Epoch 4/5]\n    </div>\n    <table border=\"1\" class=\"dataframe\">\n  <thead>\n <tr style=\"text-align: left;\">\n      <th>Step</th>\n      <th>Training Loss</th>\n      <th>Validation Loss</th>\n      <th>Accuracy</th>\n      <th>F1</th>\n      <th>Precision</th>\n      <th>Recall</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>300</td>\n      <td>No log</td>\n      <td>0.467128</td>\n      <td>0.782847</td>\n      <td>0.800000</td>\n      <td>0.846975</td>\n      <td>0.757962</td>\n    </tr>\n  </tbody>\n</table><p>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":""},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x600 with 1 Axes>","image/png":"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VlWjRo303nvvyd/fP8nHaPXq1WrcuLEqV65sfd0dOHBAmzZtsrYZOHCghg8frrZt26pkyZKKiIjQX3/9pR07dqhKlSqJbu+sWbP0xhtvKCAgQI0aNVKfPn30v//9T++++26ctr///rsWLlyoDh06yMvLS59//rnq1aun06dPK0OGDDZtk/L+adu2rWbMmKH69eurR48e+vPPPzV8+HAdOHBAP//8syRp/Pjx6tSpkzw9Pa0BZGzfevz4cS1atEjvvvuucubMqQsXLuibb75RxYoV9ffffytz5swqWLCgBg8erP79+6t9+/YqX768JKlMmTLx7g/DMFSrVi2tW7dObdq0UbFixbRy5Ur16tVLZ8+e1bhx41K8T5Li0X5Cevjer1q1qoKDgzVgwAA5ODho2rRpevPNN7Vx40aVLFnSZv53331XefPm1bBhw6whWr169bR//3516tRJgYGBunjxolavXq3Tp0/bBHJHjhxRw4YN9cEHH6hFixaaNm2a3n33Xa1YscL6Wrpz544qVqyos2fP6v3331f27Nm1efNm9e3bV+fOndP48eOty2vTpo2mT5+uqlWrqm3btnrw4IE2btyoP/74QyVKlNDMmTOtr9v27dtLknLnzh3vfmnYsKGaN2+ubdu2WUNGSTp16pT++OMPjR492jotKZ9HUVFRCg0NVWRkpDp16qSAgACdPXtWv/zyi65fvy4fH58Ej9HmzZuVIUMGa7DxuJs3b+ry5cuSHgans2fP1r59+/Ttt98muMxHJeU7zfTp0+Xp6anu3bvL09NTa9euVf/+/RUREWGzL6T4+yAPDw99//33WrlypU14dP78ea1du1YDBgxIsL4jR47o4MGDat26tby8vJK0TY9LyvcOSfrggw/0008/KSwsTIUKFdKVK1f0+++/68CBAypevHiKjuM777yjtGnTqlu3bmrcuLGqVasmT0/PBGtNSl8/f/583blzRx9++KEyZMigrVu36osvvtA///yj+fPnS5Lef/99/fvvv1q9erVmzpyZ6D7av3+/ypcvL29vb3300UdycnLSN998o0qVKum3335TqVKlbNon9btwcHCwpIfjoiX0vQt4Kdnz2kEATyehcYSeNEaAJGPAgAHWxwMGDDAkGe3bt7dOe/DggZE1a1bDYrEYI0aMsE6/du2a4ebmFu8YE4+bNm2aIckICQmx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AAAAAAB4pjgFCQAAAAAAAKYjlAIAAAAAAIDpCKUAAAAAAABgOkIpAAAAAAAAmI5QCgAAAAAAAKYjlAIAAAAAAIDpCKUAAAAAAABgOkIpAAAAAAAAmI5QCgAAAAAAAKYjlAIAAAAAAIDpCKUAAAAAAABgOkIpAAAAAAAAmI5QCgAAAAAAAKYjlAIAAAAAAIDpCKUAAAAAAABgOkIpAAAAAAAAmI5QCgAAAAAAAKYjlAIAAAAAAIDpCKUAAAAAAABgOkIpAAAAAAAAmI5QCgAAAAAAAKYjlAIAAAAAAIDpCKUAAAAAAABgOkIpAAAAAAAAmI5QCgAAAAAAAKYjlAIAAAAAAIDpCKUAAAAAAABgOkIpAAAAAAAAmI5QCgAAAAAAAKYjlAIAAAAAAIDpCKUAAAAAAABgOkIpAAAAAAAAmI5QCgAAAAAAAKYjlAIAAAAAAIDpCKUAAAAAAABgOkIpAAAAAAAAmI5QCgAAAAAAAKYjlAIAAAAAAIDpCKUAAAAAAABgOkIpAAAAAAAAmI5QCgAAAAAAAKYjlAIAAAAAAIDpCKUAAAAAAABgOkIpAAAAAAAAmI5QCgAAAAAAAKYjlAIAAAAAAIDpCKUAAAAAAABgOkIpAAAAAAAAmI5QCgAAAAAAAKYjlAIAAAAAAIDpCKUAAAAAAABgOkIpAAAAAAAAmI5QCgAAAAAAAKYjlAIAAAAAAIDpCKUAAAAAAABgOkIpAAAAAAAAmI5QCgAAAAAAAKYjlAIAAAAAAIDpCKUAAAAAAABgOkIpAAAAAAAAmI5QCgAAAAAAAKYjlAIAAAAAAIDpCKUAAAAAAABgOkIpAAAAAAAAmI5QCgAAAAAAAKYjlAIAAAAAAIDpCKUAAAAAAABgOkIpAAAAAAAAmI5QCgAAAAAAAKYjlAIAAAAAAIDpCKUAAAAAAABgOkIpAAAAAAAAmI5QCgAAAAAAAKYjlAIAAAAAAIDpCKUAAAAAAABgOkIpAAAAAAAAmI5QCgAAAAAAAKYjlAIAAAAAAIDpCKUAAAAAAABgOkIpAAAAAAAAmI5QCgAAAAAAAKYjlAIAAAAAAIDpCKUAAAAAAABgOkIpAAAAAAAAmI5QCgAAAAAAAKYjlAIAAAAAAIDpCKUAAAAAAABgOkIpAAAAAAAAmI5QCgAAAAAAAKYjlAIAAAAAAIDpCKUAAAAAAABgOkIpAAAA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"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/4957 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"e0ee7c74232d4dd49fa64180d4e2c3ba"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/4957 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"32e6ec1811474d7fa23cef7177363bfe"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/4957 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"fd3a6f66ccf14852b7261386bd7acee8"}},"metadata":{}},{"name":"stdout","text":"Agreement rate between all three models: 0.93\nNumber of samples where models disagree: 362\nExperiment for tum-nlp/bert-hateXplain completed.\n--------------------\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## Compare models","metadata":{}},{"cell_type":"code","source":"from transformers import TextClassificationPipeline\n\ndef compare_models(all_results, test_df, perspectives):\n    metrics = ['accuracy', 'f1', 'precision', 'recall']\n    comparison_results = {}\n    \n    for model_name, results in all_results.items():\n        model_metrics = {}\n        for metric in metrics:\n            model_metrics[metric] = np.mean([results[p]['eval_results'][f'eval_{metric}'] for p in perspectives])\n        comparison_results[model_name] = model_metrics\n    \n    # Create a DataFrame for easy comparison\n    df_comparison = pd.DataFrame(comparison_results).T\n    \n    # Plot comparison\n    df_comparison.plot(kind='bar', figsize=(12, 6))\n    plt.title('Model Comparison Across Metrics')\n    plt.xlabel('Models')\n    plt.ylabel('Scores')\n    plt.legend(title='Metrics', bbox_to_anchor=(1.05, 1), loc='upper left')\n    plt.tight_layout()\n    plt.savefig('model_comparison.png')\n    plt.show()\n    \n    print(df_comparison)\n    \n    # Analyze differences\n    if len(df_comparison.index) >= 2:\n        for metric in metrics:\n            diff = df_comparison.loc[df_comparison.index[0], metric] - df_comparison.loc[df_comparison.index[1], metric]\n            print(f\"Difference in {metric}: {diff:.4f}\")\n    \n    # Determine the best model\n    best_model = df_comparison['f1'].idxmax()\n    print(f\"\\nBest model based on F1 score: {best_model}\")\n    \n    # Additional analysis\n    print(\"\\nPer-perspective performance:\")\n    for model_name, results in all_results.items():\n        print(f\"\\n{model_name}:\")\n        for perspective, perspective_results in results.items():\n            print(f\"  {perspective}: F1 = {perspective_results['eval_results']['eval_f1']:.4f}\")\n    \n    # Agreement analysis\n    print(\"\\nAgreement analysis:\")\n    for model_name, results in all_results.items():\n        preds = {}\n        for p in perspectives:\n            pipeline = TextClassificationPipeline(model=results[p]['trainer'].model, tokenizer=results[p]['tokenizer'])\n            preds[p] = [pred['label'] for pred in pipeline(test_df['tweet'].tolist())]\n        \n        preds_df = pd.DataFrame(preds)\n        agreement = (preds_df['original'] == preds_df['uncontroversial']) & (preds_df['original'] == preds_df['controversial'])\n        print(f\"{model_name}: Agreement rate = {agreement.mean():.4f}\")\n    \n    return df_comparison\n\n# Usage\ndf_comparison = compare_models(all_results, test_df, perspectives)","metadata":{"execution":{"iopub.status.busy":"2024-07-04T20:07:15.295452Z","iopub.execute_input":"2024-07-04T20:07:15.295816Z","iopub.status.idle":"2024-07-04T20:11:41.124032Z","shell.execute_reply.started":"2024-07-04T20:07:15.295788Z","shell.execute_reply":"2024-07-04T20:11:41.123087Z"},"trusted":true},"execution_count":20,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x600 with 1 Axes>","image/png":""},"metadata":{}},{"name":"stdout","text":"                                      accuracy        f1  precision    recall\ncardiffnlp/twitter-roberta-base-hate  0.973237  0.983914   0.986226  0.981620\ntum-nlp/bert-hateXplain               0.954879  0.972717   0.978386  0.967352\nDifference in accuracy: 0.0184\nDifference in f1: 0.0112\nDifference in precision: 0.0078\nDifference in recall: 0.0143\n\nBest model based on F1 score: cardiffnlp/twitter-roberta-base-hate\n\nPer-perspective performance:\n\ncardiffnlp/twitter-roberta-base-hate:\n  original: F1 = 0.9942\n  uncontroversial: F1 = 0.9782\n  controversial: F1 = 0.9793\n\ntum-nlp/bert-hateXplain:\n  original: F1 = 0.9838\n  uncontroversial: F1 = 0.9708\n  controversial: F1 = 0.9636\n\nAgreement analysis:\ncardiffnlp/twitter-roberta-base-hate: Agreement rate = 0.9429\ntum-nlp/bert-hateXplain: Agreement rate = 0.9272\n","output_type":"stream"}]},{"cell_type":"code","source":"df_comparison","metadata":{"execution":{"iopub.status.busy":"2024-07-04T20:13:37.999197Z","iopub.execute_input":"2024-07-04T20:13:37.999596Z","iopub.status.idle":"2024-07-04T20:13:38.010668Z","shell.execute_reply.started":"2024-07-04T20:13:37.999565Z","shell.execute_reply":"2024-07-04T20:13:38.009647Z"},"trusted":true},"execution_count":21,"outputs":[{"execution_count":21,"output_type":"execute_result","data":{"text/plain":"                                      accuracy        f1  precision    recall\ncardiffnlp/twitter-roberta-base-hate  0.973237  0.983914   0.986226  0.981620\ntum-nlp/bert-hateXplain               0.954879  0.972717   0.978386  0.967352","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>accuracy</th>\n      <th>f1</th>\n      <th>precision</th>\n      <th>recall</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>cardiffnlp/twitter-roberta-base-hate</th>\n      <td>0.973237</td>\n      <td>0.983914</td>\n      <td>0.986226</td>\n      <td>0.981620</td>\n    </tr>\n    <tr>\n      <th>tum-nlp/bert-hateXplain</th>\n      <td>0.954879</td>\n      <td>0.972717</td>\n      <td>0.978386</td>\n      <td>0.967352</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"## Preliminary findings","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.metrics import classification_report\n\ndef analyze_annotation_perspectives(df, perspectives):\n    results = {}\n    original_hate_speech_ratio = df[df['binary_class'] == 1].shape[0] / df.shape[0]\n    \n    for perspective, perspective_df in perspectives.items():\n        hate_speech_ratio = perspective_df[perspective_df['binary_class'] == 1].shape[0] / perspective_df.shape[0]\n        change = (hate_speech_ratio - original_hate_speech_ratio) / original_hate_speech_ratio * 100\n        results[perspective] = {\n            'hate_speech_ratio': hate_speech_ratio,\n            'change_from_original': change\n        }\n    \n    return results\n\ndef plot_label_distribution(annotation_results):\n    perspectives = list(annotation_results.keys())\n    ratios = [result['hate_speech_ratio'] for result in annotation_results.values()]\n    \n    plt.figure(figsize=(10, 6))\n    sns.barplot(x=perspectives, y=ratios)\n    plt.title('Hate Speech Label Distribution Across Perspectives')\n    plt.ylabel('Ratio of Hate Speech Labels')\n    plt.xticks(rotation=45)\n    plt.tight_layout()\n    plt.savefig('label_distribution.png')\n    plt.show()\n\n\n# Assuming 'df' is your original dataframe and 'perspectives' is your dictionary of perspective dataframes\nannotation_results = analyze_annotation_perspectives(df, perspectives)\n\nprint(\"Annotation Perspectives:\")\nfor perspective, result in annotation_results.items():\n    print(f\"- {perspective} perspective changed hate speech labels by {result['change_from_original']:.2f}%\")\n\nplot_label_distribution(annotation_results)","metadata":{"execution":{"iopub.status.busy":"2024-07-04T20:31:15.205699Z","iopub.execute_input":"2024-07-04T20:31:15.206293Z","iopub.status.idle":"2024-07-04T20:31:15.643857Z","shell.execute_reply.started":"2024-07-04T20:31:15.206240Z","shell.execute_reply":"2024-07-04T20:31:15.642840Z"},"trusted":true},"execution_count":29,"outputs":[{"name":"stdout","text":"Annotation Perspectives:\n- original perspective changed hate speech labels by 0.33%\n- uncontroversial perspective changed hate speech labels by 4.56%\n- controversial perspective changed hate speech labels by -32.99%\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1765: FutureWarning: unique with argument that is not not a Series, Index, ExtensionArray, or np.ndarray is deprecated and will raise in a future version.\n  order = pd.unique(vector)\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x600 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"def compare_model_performance(results):\n    model_comparison = {}\n    for model_name, model_results in results.items():\n        model_comparison[model_name] = model_results['eval_results']\n    return model_comparison\n\n# Assuming 'results' is your dictionary of model results\nmodel_comparison = compare_model_performance(results)\n\nprint(\"\\nModel Performance:\")\nfor model, performance in model_comparison.items():\n    print(f\"- {model}:\")\n    print(f\"  Accuracy: {performance['eval_accuracy']:.4f}\")\n    print(f\"  F1 Score: {performance['eval_f1']:.4f}\")\n    print(f\"  Precision: {performance['eval_precision']:.4f}\")\n    print(f\"  Recall: {performance['eval_recall']:.4f}\")\n\n# Calculate the difference between models\nmodel_names = list(model_comparison.keys())\nif len(model_names) == 2:\n    diff = model_comparison[model_names[0]]['eval_f1'] - model_comparison[model_names[1]]['eval_f1']\n    better_model = model_names[0] if diff > 0 else model_names[1]\n    worse_model = model_names[1] if diff > 0 else model_names[0]\n    print(f\"\\n{better_model} outperformed {worse_model} by {abs(diff)*100:.2f}% in terms of F1-score\")\n\n# Determine the best model\nbest_model = max(model_comparison, key=lambda x: model_comparison[x]['eval_f1'])\nprint(f\"\\nBest model based on F1 score: {best_model}\")\n\n# Visualization\nimport matplotlib.pyplot as plt\n\ndef plot_model_comparison(model_comparison):\n    metrics = ['eval_accuracy', 'eval_f1', 'eval_precision', 'eval_recall']\n    models = list(model_comparison.keys())\n    \n    fig, ax = plt.subplots(figsize=(12, 6))\n    \n    bar_width = 0.2\n    index = np.arange(len(models))\n    \n    for i, metric in enumerate(metrics):\n        values = [model_comparison[model][metric] for model in models]\n        ax.bar(index + i*bar_width, values, bar_width, label=metric.split('_')[1].capitalize())\n    \n    ax.set_xlabel('Models')\n    ax.set_ylabel('Scores')\n    ax.set_title('Model Performance Comparison')\n    ax.set_xticks(index + bar_width * (len(metrics) - 1) / 2)\n    ax.set_xticklabels(models, rotation=45, ha='right')\n    ax.legend()\n    \n    plt.tight_layout()\n    plt.savefig('model_comparison.png')\n    plt.show()\n\nplot_model_comparison(model_comparison)","metadata":{"execution":{"iopub.status.busy":"2024-07-04T20:29:48.218968Z","iopub.execute_input":"2024-07-04T20:29:48.219373Z","iopub.status.idle":"2024-07-04T20:29:48.754292Z","shell.execute_reply.started":"2024-07-04T20:29:48.219319Z","shell.execute_reply":"2024-07-04T20:29:48.753319Z"},"trusted":true},"execution_count":27,"outputs":[{"name":"stdout","text":"\nModel Performance:\n- original:\n  Accuracy: 0.9728\n  F1 Score: 0.9838\n  Precision: 0.9782\n  Recall: 0.9894\n- uncontroversial:\n  Accuracy: 0.9514\n  F1 Score: 0.9708\n  Precision: 0.9728\n  Recall: 0.9688\n- controversial:\n  Accuracy: 0.9405\n  F1 Score: 0.9636\n  Precision: 0.9841\n  Recall: 0.9439\n\nBest model based on F1 score: original\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x600 with 1 Axes>","image/png":"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Abp7967WrVund99919L+7ycPvqycOXPq4MGDioyMfOpi5Tlz5tT27dtVoUKFFw5cYrm4uKhatWrasWOHrl69+sQIpv960Z/FxHLjxg2FhobGGS117tw5SbJMC/zuu++UI0cOrVu3Ls5IpNinNL6KnDlzqm/fvurbt6/Onz+vokWLasKECVq6dGmy+JkDACC5YU0pAABeE66urpo5c6aGDx+u+vXrP7VfnTp1FB0drWnTpsVp/+abb2QymSxP7or973+f3jdp0qQ4r21tbdW4cWOtXbtWv//++xPnu3PnTkIu57lq1qwpNzc3jR07Ns4Uq8Q4r4+PjxwcHDRlypQ4I0/mzZun4ODgeJ9AmNhiR8L8+/wRERGaMWNGgo/ZuHFjBQUFPfG9//d5Pv74Y0VHR2vUqFFP9ImKitKDBw+eeY5hw4bJbDarVatWevTo0RPbjx49qkWLFkl68Z/FxBIVFaXZs2dbXkdERGj27NlKnz69SpQoISn+9/3gwYPav39/gs8bFhamx48fx2nLmTOnUqZMqfDwcEnJ42cOAIDkhpFSAAC8Rp42fe7f6tevr6pVq2rQoEG6fPmyihQpop9//lnff/+9evXqZRmBVLRoUTVr1kwzZsxQcHCwypcvL39/f124cOGJY3755ZfauXOnypQpo44dO6pAgQK6d++ejh07pu3bt+vevXuJfq1ubm6aOXOmWrVqpeLFi6tp06ZKnz69rly5ok2bNqlChQrxhi8vIn369BowYIBGjBihWrVqqUGDBjp79qxmzJihUqVKxVlgOqmUL19eqVOnVps2bdSzZ0+ZTCYtWbLklaZntW7dWosXL1afPn106NAhVapUSaGhodq+fbu6du2q999/X5UrV1bnzp3l5+en48ePq0aNGrK3t9f58+e1Zs0aTZ48+anrlcXWPX36dHXt2lX58uVTq1atlDt3boWEhCggIEAbN27U6NGjJb34z2JiyZQpk7766itdvnxZefLk0apVq3T8+HHNmTPHMnKsXr16WrdunT744APVrVtXly5d0qxZs1SgQIF4Q7YXce7cOVWvXl0ff/yxChQoIDs7O61fv16BgYFq2rSppOTxMwcAQHJDKAUAwBvGxsZGGzdu1NChQ7Vq1SotWLBA3t7eGj9+vPr27Run7/z585U+fXotW7ZMGzZsULVq1bRp06YnpmV5enrq0KFD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AeDtEXu/fvDggVKlSqXIyEj17t1bhw4d0kcffaQuXbrI1dVVY8eO1eDBg5U7d24FBQVp+/btKlasmLXLB94ohFLAa+L333/XrFmzVLduXct0vFGjRmn58uX66KOP1Lt3b6VMmVJnzpzRjRs3VL16ddna2ioqKkp2dszUBYCkFPsLzt69e3X16lW99957SpcunXbu3KmmTZuqXLly2rBhgyRp1apVOn78uO7evatevXqpQIEC1i0eAN4isffrn376SVOnTtXQoUMtD5ro0aOHjh49qg8//FDdu3eXi4uL9u3bp+DgYBUsWJARrUASIJQCkqFBgwapUaNGKlGihCTpxx9/VMuWLeXi4qL58+erVq1alr6xwVSTJk3Url07Zc2a1bKNJ4IAQNKL/QVn3bp1ateunfr06aPmzZsrV65ciomJ0a5du/Txxx+rXLly2rhxo2W/f4+EBQAYZ926dWrbtq369eunWrVqqXTp0pKkyMhI9ezZU4cOHVLz5s3VqVMnpUyZ0srVAm82/iUEJDNHjhzR1atXVaRIEUtbvXr15Ovrq3v37mnPnj26f/++ZduQIUPUsmVLTZkyRT///HOcYxFIAUDSM5lMCggIUPv27fXNN99o8ODBypUrl6R/PhyoWrWqVq9ercOHD6tq1aqW/QikAMB4Z86cUe/evTVu3DgNHTrUEkidOnVK9vb2mjZtmsqXL69Zs2ZpwYIFYgwHkLSY0wMkMyVLltSiRYtkMpn03XffKUWKFKpdu7a++eYbRUREaMWKFcqSJYuaNWumVKlSSfpnZFXmzJnVqlUr6xYPAG+J/67V98svv6hSpUry9fXV33//rYMHD2rBggUymUxq2LChGjZsqEWLFql79+66du2asmTJYsXqAeDt8u97dlhYmBwdHfXJJ5/o0aNHWrp0qVavXq1ffvlF77//vlauXKmJEyfK3t5e9evXZ11WIIkxfQ9IRmKncsTExOjy5cuqW7eu8uXLpx49eqhatWqSpM6dO8vf3199+/ZV8+bN5e7uHucYTNkDgKQX+wvOrl27ZGtrqy1btmjHjh3q2rWrvv/+e4WFhSkkJEReXl46fvy4tm7dqkyZMunx48dycXGxdvkA8NZZvny5tmzZopEjR6p06dIqWbKkrl27phw5cih//vyqWbOmqlWrpqVLl6p58+bWLhd4azBuHEgmzGazZSqH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"},"metadata":{}}]}]}